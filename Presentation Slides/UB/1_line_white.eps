%!PS-Adobe-3.1 EPSF-3.0%%Title: 1 line (cntrd).white copy%%Creator: Adobe Illustrator(R) X%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: Rebecca Farnham%%CreationDate: 10/6/03%%BoundingBox: 0 0 318 21%%HiResBoundingBox: 0 0 317.0704 20.9219%%CropBox: 0 0 317.0704 20.9219%%LanguageLevel: 2%%DocumentData: Clean7Bit%ADOBeginClientInjection: DocumentHeader "AI10"%ADOEndClientInjection: DocumentHeader "AI10"%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)%%+ procset Adobe_CoolType_Core (2.12 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors: %%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%ADOBeginClientInjection: DocumentProlog Start "AI10"%ADOEndClientInjection: DocumentProlog Start "AI10"%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 60 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 		exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def	/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup /Cyan eq{						pop (_Cyan_)					}{						dup /Magenta eq{							pop (_Magenta_)						}{							dup /Yellow eq{								pop (_Yellow_)							}{								dup /Black eq{									pop (_Black_)								}{									dup () cvn eq{										pop (Process)									}if								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def		/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust		AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer		AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse		AGMUTIL_GSTATE_flt setflat	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/rdline{	currentfile AGMUTIL_str256 readline pop} bdf/rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def				AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/AGMUTIL_imagefile nd/AGMUTIL_imbuf nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put	exch	load exec}def/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMUTIL_imbuf readstring pop			}{				exec			} ifelse			AGMUTIL_imagefile exch writestring		}for		true	}ifelse	end}def/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}def/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 205 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_will_host_separate xdf	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if			/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 8 def													/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						currentpagedevice/OverrideSeparations known							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				true exch					{					convert_spot_to_process and					}				forall				}{				false exch					{					convert_spot_to_process or					}				forall				}ifelse			}ifelse		}def	}ifelse		AGMCORE_host_sep AGMCORE_will_host_separate not and {		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def		AGMCORE_color_space_onhost_seps	}if	/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/clip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&clip /clip load put			/clip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&clip			}def		}if		/eoclip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put			/eoclip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&eoclip			}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{					/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop																	[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 exch put					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 exch put						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				AGMCORE_&&&setcolorspace			}def		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 		current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave 		dup begin		1 setgray		0 0 ImageMatrix itransform 		Width Height ImageMatrix idtransform rectfill 		end		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/get_csd_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		/AGMCORE_CSD_Name xdf		AGMCORE_CSD_cache		{			dup /Name get AGMCORE_CSD_Name eq			{				exch pop exit			}{				pop			}ifelse			pop		}forall		end	}if}def/cachepattern_level2{	4 dict begin	/comparebuffer exch def	/holdbuffer exch def	/readbuffer 1024 string def	/LZWFilter holdbuffer /LZWEncode filter def	{		currentfile readbuffer readline not			{pop exit}		if		dup LZWFilter exch writestring		LZWFilter (\n) writestring		comparebuffer eq			{exit}		if	}loop	LZWFilter closefile	end}def/cachepattern_level3{	3 dict begin	/comparebuffer exch def	/readbuffer 1024 string def	/DoEOL false def	{ 		DoEOL			{			(\n)			/DoEOL false def			}			{			currentfile readbuffer readline not				{pop ()}				{				dup length 0 eq					{ pop(\n)}					{					dup comparebuffer eq						{pop ()}						{/DoEOL true def}					ifelse					}				ifelse				}			ifelse			}		ifelse	} /ReusableStreamDecode filter	end}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix	makepattern}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias		/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput		Adobe_AGM_Core begin	/setcustomcolor	{				dup /customcolor_tint exch AGMCORE_gput				current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		fill grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if		Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put}def/driver_check_media_override{	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne	{		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix	}if}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.12 0%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.12 0userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dictdef}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Databegin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/argsexch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}ifdup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exchgetinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get endcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 subdef/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvxexch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname geterrordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashowload def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdictAdobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup where pop exch get/globaldictwhere{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{poppop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict endexch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal duplength array copy exch setglobal}bind def/newencodedfont{currentglobal{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory3 index get/FontReferenced known}{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exchdup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if defcurrentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategiesknown{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlengthadd dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init getexec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}binddef/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSubtrue def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfontexch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 31}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getintervalcvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exchdefinefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup lengthexch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add addgetinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloadedknown{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparamswhere dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 getbegin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128string def/$slen 0 def/$sname null def/$match false def/$fontname null def/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname nulldef/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFontexch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exchdefinefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfontcc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}binddef currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontnameexch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch putdup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exchmoveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsaveLevel2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall popgrestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobalexch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontNameknown{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dupbegin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dupsin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}ifelse FontName currentdict end definefont exch setglobal}bind def end def/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$ObliqueSetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slengetinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exchputinterval/$match false def $SubstituteFont/$dstack countdictstack arraydictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forallpop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch poppop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]defend def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dictdup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copiedexch definefont 3 copy put pop pop}for def currentdict end}{$Strategies/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapnamelength add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontnameexch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo getdup/Registry get Registry eq exch/Ordering get Ordering eq and and{exchrestore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end endcurrentdict/$error known currentdict/languagelevel known and dup{pop $error/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gtand{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMapfindresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index subexch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getintervalexch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelseend}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfontload put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontNameknown{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFoundtrue def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print( substitution revised, using )print dup/FontName known{dup/FontName get}{(unspecified font)}ifelse $str cvs print(.)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end endAdobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategyknown{$Strategy/$BuildFont get exec}if}if end}bind put}if end end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.%%Version: 1.13 0systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelseexch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exchdef/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun knownnot ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont knowndef/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevelknown{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFontfindresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exchlength sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFontfindresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vmexch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vmsetglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcodeexch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod putstringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 31 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvmsetglobal}if end}def/:{string currentfile exch readstring pop}executeonly defend ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.0010 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx excherrordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get(Error: )print dup(                    )cvs print errordict exch get exec stop}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dupstring/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 indexadd 2 index length le{2 index getinterval dst_string dst_index 2 indexputinterval length dst_index add/dst_index exch def exit}{1 index length 1index sub dup 4 1 roll getinterval dst_string dst_index 2 index putintervalpop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}looppop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomarkcurrentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresourcebegin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecodefilter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal/Generic/Category findresource dup length dict copy dup/InstanceType/dicttypeput/CIDFont exch/Category defineresource pop setglobal}ifelsect_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMapdefineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2copy known{get dup dup maxlength exch length eq{dup length 10 add dict copyct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copyknown{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelseload exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZEle{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec popdup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop popfalse exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArrayget 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop poppop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 01 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSETcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exchcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 rollGlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontNamecurrentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartDatact_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSetct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInitct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSetdefineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSetdefineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index beginCIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCodeexch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 rolltrue charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidthmoveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aloadpop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dupmaxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdictend/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring putrootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfontct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidthsetlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDictct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dupct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Privateget mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse getexec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get beginct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encodingct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load defct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string defcurrentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dupnot{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WModeexch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrixmatrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}ifdef/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if arraydef BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProcknown{CIDFont/CDevProc get/CDevProc exch def}if currentdict endBaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVectorexch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 muldef FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefontsetfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths getbegin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astoredef}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop popexch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMapct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}binddef currentdict readonly pop end end%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 65 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if /AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				AGMIMG_&image			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					image				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{  	 						currentoverprint not{  			 					1 AGMCORE_&setgray  	 							knockout_image_samples  			 					currentdict imageormask_sys  			 				}{  			 					currentdict ignoreimagedata  			 				}ifelse				 		}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										currentdict consumeimagedata									}{										invert_image_samples						 				1 AGMCORE_&setgray										currentdict imageormask_sys									}ifelse								}{										currentdict ignoreimagedata								}ifelse							}{																	MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								image							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{							currentdict consumeimagedata  							currentoverprint not Name (All) eq or{								gsave 								knockout_unitsq								grestore		 					}if 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/imageormask_l2_overprint{		currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 									currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace								AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 								mark exch						dup	dup dup														AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse								AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse						imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				currentdict consumeimagedata		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			AGMIMG_&image		}ifelse				end end}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/ImageType 1 def			/Decode [0 1 def]			currentdict		end	}if	dup begin		/NComponents 1 cdndf		/MultipleDataSources false cdndf		/SkipImageProc {false} cdndf		/HostSepColorImage false cdndf		/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse		] cdndf		/Operator /image cdndf	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/InksUsed [] def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse										Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 											AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 												currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{										MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop								Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 									{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{								MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResource%ADOBeginClientInjection: DocumentProlog End "AI10"%ADOEndClientInjection: DocumentProlog End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetup%ADOBeginClientInjection: DocumentSetup Start "AI10"%ADOEndClientInjection: DocumentSetup Start "AI10"Adobe_AGM_Utils begin2 2010 true Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get exec%ADOBeginClientInjection: DocumentSetup End "AI10"%ADOEndClientInjection: DocumentSetup End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (1 line \(cntrd\).white copy) 1%%EndPageComments%%BeginPageSetup%ADOBeginClientInjection: PageSetup Start "AI10"%ADOEndClientInjection: PageSetup Start "AI10"Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%ADOBeginClientInjection: PageSetup End "AI10"%ADOEndClientInjection: PageSetup End "AI10"%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -20.9219 translate[1 0 0 1 0 0 ]  concatmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark800 path_rez% page clipgsavenewpathgsave % PSGState0 0 mo0 20.9219 li317.071 20.9219 li317.071 0 liclp[1 0 0 1 0 0 ] concat%ADOBeginClientInjection: BeginPageContent "AI10"%ADOEndClientInjection: BeginPageContent "AI10"gsave % PSGState0 0 mo317 0 li317 21 li0 21 li0 0 liclp37.1651 13.4468 mo37.1651 13.4068 li38.7886 13.106 40.2916 12.024 40.2916 10.2403 cv40.2916 7.69483 38.0069 6.47266 35.2813 6.45215 cv28.9527 6.39502 li28.9527 2.74805 li28.9527 2.18165 29.1758 1.85547 29.7418 1.85547 cv32.0098 1.85547 li32.0098 0 li21.73 0 li21.73 1.85547 li24.3008 1.85547 li24.8668 1.85547 25.0899 2.18165 25.0899 2.74805 cv25.0899 6.39502 li11.9815 6.39502 li11.9815 8.38282 li14.5884 8.38282 li15.1592 8.38282 15.3838 9.21387 15.3838 9.78418 cv15.3838 12.7686 li10.5 12.7686 9.87159 10.3292 9.87159 8.25489 cv9.87159 2.74805 li9.87159 2.18165 10.4717 1.85547 11.0381 1.85547 cv13.0889 1.85547 li13.0889 0 li0 0 li0 1.85547 li2.50245 1.85547 li3.06885 1.85547 3.292 2.18165 3.292 2.74805 cv3.292 8.167 li3.292 12.6324 7.917 14.3794 15.3838 14.3794 cv15.3838 18.1104 li15.3838 18.6983 15.0381 19.0093 14.4849 19.0093 cv12.233 19.0093 li12.233 20.8716 li35.1412 20.9219 li35.2813 20.9219 40.6524 21.2027 40.6524 16.9942 cv40.6524 14.9297 39.0894 13.7071 37.1651 13.4468 cvcp28.9527 9.26075 mo28.9527 8.48682 li32.4419 8.48682 li34.1778 8.48682 35.3677 8.93311 35.3677 10.523 cv35.3677 11.9346 33.8482 12.7012 32.4419 12.5333 cv27.2647 12.5333 li28.439 11.6553 28.9527 10.3409 28.9527 9.26075 cvcp21.8658 8.48682 mo25.0899 8.48682 li25.0899 9.51612 li25.0899 10.7808 24.3013 12.522 21.8658 12.522 cv21.8658 8.48682 licp32.5811 18.9053 mo21.8658 18.9053 li21.8658 14.5137 li32.5811 14.5167 li33.983 14.5167 35.545 14.9224 35.545 17.0523 cv35.545 18.7613 33.4249 18.9053 32.5811 18.9053 cvfalse sop0 0 0 0 cmykf48.4888 10.5621 mo48.4888 11.2237 48.6783 11.7247 49.3165 11.7247 cv50.0142 11.7247 50.1636 11.254 50.1636 10.5723 cv50.1636 6.41211 li52.7857 6.41211 li52.7857 10.522 li52.7857 12.7828 51.3946 13.5215 49.2862 13.5215 cv47.337 13.5215 45.8042 12.7232 45.8042 10.6622 cv45.8042 6.41211 li48.4888 6.41211 li48.4888 10.5621 li0 0 0 0 cmykf53.7471 8.19336 mo56.1231 8.19336 li56.1231 9.08399 li56.1431 9.08399 li56.4429 8.3545 57.1334 8.06397 57.8423 8.06983 cv59.1797 8.06983 59.669 8.771 59.669 9.7837 cv59.669 13.3965 li57.1534 13.3965 li57.1534 10.4024 li57.1534 10.1031 57.1534 9.69336 56.7129 9.69336 cv56.2627 9.69336 56.2627 10.1031 56.2627 10.4024 cv56.2627 13.3965 li53.7471 13.3965 li53.7471 8.19336 li0 0 0 0 cmykf60.6285 8.19336 mo63.1441 8.19336 li63.1441 13.3965 li60.6285 13.3965 li60.6285 8.19336 licp63.1441 7.63086 mo60.6285 7.63086 li60.6285 5.89649 li63.1441 5.89649 li63.1441 7.63086 li0 0 0 0 cmykf69.9781 8.19336 mo68.398 13.3965 li65.168 13.3965 li63.6182 8.19336 li66.1983 8.19336 li66.8482 11.5997 li66.8682 11.5997 li67.5166 8.19336 li69.9781 8.19336 li0 0 0 0 cmykf73.9029 10.3028 mo73.9029 9.90186 73.8423 9.27002 73.271 9.27002 cv72.689 9.27002 72.5586 9.89161 72.5889 10.3028 cv73.9029 10.3028 licp72.5987 11.3965 mo72.6387 12.0567 73.2505 12.209 73.9927 12.209 cv74.6841 12.209 75.3057 12.0875 75.7066 11.8741 cv75.7066 13.2237 li75.0352 13.4322 74.2334 13.5215 73.3511 13.5215 cv71.2393 13.5215 70.1202 12.5074 70.1202 10.7007 cv70.1202 8.9502 71.2393 8.06983 73.3511 8.06983 cv75.376 8.06983 76.0874 9.33057 76.0874 11.0884 cv76.0874 11.3965 li72.5987 11.3965 li0 0 0 0 cmykf79.1041 8.19336 mo79.1031 9.36963 li79.1231 9.36963 li79.4229 8.62989 79.9229 8.06983 80.7129 8.06983 cv80.8628 8.06983 81.023 8.08985 81.1231 8.11963 cv81.1231 10.211 li81.003 10.1612 80.7832 10.1309 80.5538 10.1309 cv79.8536 10.1309 79.2637 10.7413 79.2637 11.5093 cv79.2637 13.3965 li76.7481 13.3965 li76.7481 8.19336 li79.1041 8.19336 li0 0 0 0 cmykf81.5699 11.7339 mo82.0489 12.0274 82.7681 12.209 83.417 12.209 cv83.8379 12.209 84.3418 12.1285 84.3418 11.8653 cv84.3418 11.2203 81.42 11.8453 81.42 9.8252 cv81.42 8.32715 83.1075 8.06836 84.3516 8.06836 cv84.981 8.06836 85.6099 8.15821 86.2291 8.28711 cv86.2291 9.68409 li85.6998 9.50245 85.1607 9.38086 84.5914 9.38086 cv84.1602 9.38086 83.7168 9.42139 83.7168 9.74463 cv83.7168 10.2881 86.6387 9.66407 86.6387 11.6329 cv86.6387 13.1241 84.941 13.5215 83.7471 13.5215 cv83.0176 13.5215 82.2789 13.4024 81.5699 13.2237 cv81.5699 11.7339 li0 0 0 0 cmykf87.3082 8.19336 mo89.8238 8.19336 li89.8238 13.3965 li87.3082 13.3965 li87.3082 8.19336 licp89.8238 7.63086 mo87.3082 7.63086 li87.3082 5.89649 li89.8238 5.89649 li89.8238 7.63086 li0 0 0 0 cmykf91.2183 8.19336 mo91.2183 6.99366 li93.7344 6.22364 li93.7344 8.19336 li94.8741 8.19336 li94.8741 9.69336 li93.7344 9.69336 li93.7344 11.1583 li93.7344 11.5967 93.9542 11.8355 94.2842 11.8355 cv94.5142 11.8355 94.6944 11.8057 94.8741 11.7461 cv94.8741 13.252 li94.3243 13.4117 93.7642 13.5215 93.1451 13.5215 cv91.8477 13.5215 91.2183 12.8721 91.2183 11.4927 cv91.2183 9.69336 li90.3287 9.69336 li90.3287 8.19336 li91.2183 8.19336 li0 0 0 0 cmykf97.44 8.19336 mo98.0889 11.3887 li98.1089 11.3887 li98.7286 8.19336 li101.146 8.19336 li99.7671 12.5469 li99.2676 14.1841 98.7984 15.6143 96.8306 15.6143 cv96.1714 15.6143 95.6719 15.5142 95.1827 15.4341 cv95.1827 13.9542 li95.3824 14.0142 95.5821 14.0542 95.9317 14.0542 cv96.4312 14.0542 96.7208 13.8345 96.7208 13.565 cv96.7208 13.1758 96.3414 12.417 96.1612 11.8379 cv94.8331 8.19336 li97.44 8.19336 li0 0 0 0 cmykf108.596 11.2725 mo108.596 11.7188 108.335 12.1949 107.813 12.1949 cv107.422 12.1949 107.221 12.0562 107.221 11.6993 cv107.221 11.1636 107.824 11.1138 108.346 11.1138 cv108.596 11.1138 li108.596 11.2725 licp105.523 9.82666 mo106.023 9.57374 106.662 9.38086 107.261 9.38086 cv107.894 9.38086 108.586 9.46192 108.596 10.1402 cv108.366 10.1202 107.964 10.0699 107.613 10.0699 cv106.362 10.0699 104.924 10.3912 104.924 11.9869 cv104.924 13.084 105.863 13.5215 106.832 13.5215 cv107.546 13.5152 108.187 13.2354 108.537 12.6451 cv108.556 12.6451 li108.556 13.3951 li110.893 13.3951 li110.893 10.2305 li110.893 8.32715 109.146 8.06836 107.703 8.06836 cv106.722 8.06836 106.272 8.15821 105.523 8.3667 cv105.523 9.82666 li0 0 0 0 cmykf112.139 8.19336 mo112.139 6.99366 li114.654 6.22364 li114.654 8.19336 li115.794 8.19336 li115.794 9.69336 li114.654 9.69336 li114.654 11.1583 li114.654 11.5967 114.875 11.8355 115.205 11.8355 cv115.435 11.8355 115.614 11.8057 115.794 11.7461 cv115.794 13.252 li115.245 13.4117 114.685 13.5215 114.065 13.5215 cv112.768 13.5215 112.139 12.8721 112.139 11.4927 cv112.139 9.69336 li111.249 9.69336 li111.249 8.19336 li112.139 8.19336 li0 0 0 0 cmykf122.594 10.5215 mo123.314 10.5215 li123.814 10.5215 124.314 10.6324 124.314 11.2354 cv124.314 11.7784 123.784 11.959 123.294 11.959 cv122.594 11.959 li122.594 10.5215 licp120.078 13.3965 mo124.124 13.3965 li125.576 13.3965 126.999 13.2168 126.999 11.4566 cv126.999 10.753 126.397 9.99268 125.426 9.8628 cv125.426 9.84278 li126.363 9.60352 126.874 9.09424 126.874 8.12745 cv126.874 6.8003 125.683 6.41211 124.472 6.41211 cv120.078 6.41211 li120.078 13.3965 licp122.594 7.72461 mo123.327 7.72461 li123.81 7.72461 124.251 7.88575 124.251 8.40967 cv124.251 8.94336 123.739 9.08399 123.267 9.08399 cv122.594 9.08399 li122.594 7.72461 li0 0 0 0 cmykf133.749 13.3965 mo131.373 13.3965 li131.373 12.4903 li131.353 12.4903 li131.053 13.2203 130.362 13.5103 129.654 13.5201 cv128.316 13.5201 127.827 12.8194 127.827 11.8067 cv127.827 8.19336 li130.342 8.19336 li130.342 11.188 li130.342 11.4874 130.342 11.8965 130.783 11.8965 cv131.233 11.8965 131.233 11.4874 131.233 11.188 cv131.233 8.19336 li133.749 8.19336 li133.749 13.3965 li0 0 0 0 cmykf135.131 9.69336 mo134.211 9.69336 li134.211 8.19336 li135.131 8.19336 li135.131 7.74805 li135.162 6.35157 136.082 5.77149 137.383 5.77149 cv137.974 5.77149 138.593 5.86182 138.943 5.95752 cv138.943 7.34278 li138.824 7.31202 138.713 7.27149 138.394 7.27149 cv138.074 7.27149 137.753 7.49463 137.753 7.91993 cv137.753 8.19336 li138.824 8.19336 li138.824 9.69336 li137.753 9.69336 li137.753 13.3965 li135.131 13.3965 li135.131 9.69336 li0 0 0 0 cmykf139.583 9.69336 mo138.663 9.69336 li138.663 8.19336 li139.583 8.19336 li139.583 7.74805 li139.613 6.35157 140.534 5.77149 141.835 5.77149 cv142.425 5.77149 143.045 5.86182 143.395 5.95752 cv143.395 7.34278 li143.275 7.31202 143.166 7.27149 142.845 7.27149 cv142.525 7.27149 142.205 7.49463 142.205 7.91993 cv142.205 8.19336 li143.275 8.19336 li143.275 9.69336 li142.205 9.69336 li142.205 13.3965 li139.583 13.3965 li139.583 9.69336 li0 0 0 0 cmykf147.118 11.2725 mo147.118 11.7188 146.857 12.1949 146.335 12.1949 cv145.944 12.1949 145.743 12.0562 145.743 11.6993 cv145.743 11.1636 146.345 11.1138 146.867 11.1138 cv147.118 11.1138 li147.118 11.2725 licp144.045 9.82666 mo144.544 9.57374 145.184 9.38086 145.783 9.38086 cv146.416 9.38086 147.108 9.46192 147.118 10.1402 cv146.887 10.1202 146.486 10.0699 146.134 10.0699 cv144.884 10.0699 143.446 10.3912 143.446 11.9869 cv143.446 13.084 144.385 13.5215 145.354 13.5215 cv146.068 13.5152 146.708 13.2354 147.058 12.6451 cv147.078 12.6451 li147.078 13.3951 li149.415 13.3951 li149.415 10.2305 li149.415 8.32715 147.667 8.06836 146.225 8.06836 cv145.244 8.06836 144.794 8.15821 144.045 8.3667 cv144.045 9.82666 li0 0 0 0 cmykf152.785 5.89649 mo152.785 13.3965 li150.27 13.3965 li150.27 5.89649 li152.785 5.89649 li0 0 0 0 cmykf156.163 10.7002 mo156.163 10.0792 156.223 9.56836 156.707 9.56836 cv157.191 9.56836 157.26 10.0792 157.26 10.7002 cv157.26 11.461 157.191 12.0215 156.707 12.0215 cv156.223 12.0215 156.163 11.461 156.163 10.7002 cvcp153.479 10.7002 mo153.479 12.5015 154.601 13.5215 156.707 13.5215 cv158.802 13.5215 159.944 12.5015 159.944 10.7002 cv159.944 8.94874 158.802 8.06836 156.707 8.06836 cv154.601 8.06836 153.479 8.94874 153.479 10.7002 cv0 0 0 0 cmykf170.863 5.7876 mo171.166 5.7876 171.236 5.71778 171.468 5.49512 cv171.668 5.49512 li171.585 5.98633 171.48 6.87647 171.386 7.61377 cv171.027 7.64893 li171.015 7.04004 170.957 6.73584 170.816 6.53663 cv170.653 6.32618 170.29 6.25586 169.588 6.25586 cv168.98 6.25586 li167.938 11.6524 li167.693 12.9166 167.774 12.9986 168.886 13.0689 cv168.828 13.3965 li165.248 13.3965 li165.306 13.0689 li166.335 12.9986 166.441 12.9166 166.687 11.6524 cv167.739 6.25586 li167.33 6.25586 li166.335 6.25586 165.984 6.39649 165.774 6.60694 cv165.598 6.78272 165.399 7.11036 165.142 7.64893 cv164.779 7.64893 li164.978 6.87647 165.201 6.0918 165.341 5.49512 cv165.54 5.49512 li165.657 5.76416 165.774 5.7876 166.09 5.7876 cv170.863 5.7876 li0 0 0 0 cmykf171.442 13.5372 mo171.56 12.9405 171.688 12.3672 171.805 11.7706 cv172.87 6.39063 li172.963 5.92383 172.952 5.86524 172.554 5.86524 cv171.993 5.86524 li171.993 5.58448 li172.952 5.38184 174.023 5.08399 174.117 5.08399 cv174.257 5.08399 174.28 5.28663 174.21 5.64307 cv173.278 10.0503 li173.301 10.0503 li174.105 9.1377 174.895 8.5879 175.402 8.35352 cv175.636 8.23682 175.87 8.17774 176.045 8.17774 cv176.314 8.17774 176.736 8.31836 176.502 9.39502 cv176.314 10.2608 176.092 11.2437 175.881 12.2149 cv175.811 12.5196 175.788 12.6246 175.893 12.6246 cv175.987 12.6246 176.408 12.379 176.712 12.1334 cv176.864 12.4258 li176.232 13.0342 175.215 13.5372 174.947 13.5372 cv174.631 13.5372 174.476 13.2681 174.643 12.566 cv175.272 9.82813 li175.39 9.32471 175.414 9.04395 175.143 9.04395 cv174.706 9.04395 173.592 10.1441 173.126 10.9512 cv173.057 11.2789 172.765 12.566 172.694 13.2212 cv171.442 13.5372 li0 0 0 0 cmykf180.293 8.69336 mo180.469 8.69336 180.786 8.81055 180.786 9.24366 cv180.786 9.89893 180.281 10.4029 178.872 10.8829 cv179.072 9.55958 179.577 9.00928 179.905 8.82227 cv180.022 8.75196 180.164 8.69336 180.293 8.69336 cvcp181.393 11.9131 mo180.727 12.522 180.117 12.7559 179.659 12.7559 cv178.966 12.7559 178.802 12.0655 178.802 11.5152 cv178.802 11.4566 178.813 11.3511 178.825 11.2808 cv179.94 10.9297 181.942 10.1919 181.942 9.11475 cv181.942 8.5879 181.533 8.17823 180.809 8.17823 cv180.152 8.17823 179.447 8.54102 178.942 8.90381 cv178.091 9.52442 177.567 10.754 177.567 11.8311 cv177.567 13.1993 178.359 13.5372 178.907 13.5372 cv179.412 13.5372 180.434 13.3624 181.592 12.1939 cv181.393 11.9131 li0 0 0 0 cmykf185.153 11.1006 mo185.259 11.7671 185.822 13.1001 186.98 13.1001 cv187.974 13.1001 188.418 12.375 188.418 11.6387 cv188.418 10.9136 188.021 10.4459 187.389 10.0484 cv187.109 9.87256 li186.43 9.43995 185.716 8.84376 185.716 7.90821 cv185.716 6.49317 186.922 5.61573 188.317 5.61573 cv188.692 5.61573 189.079 5.6626 189.5 5.82666 cv189.71 5.90821 189.849 5.9668 189.965 6.02149 cv189.93 6.52393 189.93 6.99122 189.918 7.63916 cv189.559 7.67432 li189.477 7.04297 189.243 6.08399 188.126 6.08399 cv187.261 6.08399 186.84 6.68018 186.84 7.39356 cv186.84 8.01368 187.284 8.39942 187.857 8.77344 cv188.255 9.03077 li189.014 9.52198 189.622 10.1299 189.622 11.0889 cv189.622 12.6089 188.325 13.5684 186.863 13.5684 cv185.904 13.5684 185.049 13.1705 184.84 12.8311 cv184.829 12.5738 184.817 11.9424 184.793 11.1358 cv185.153 11.1006 li0 0 0 0 cmykf193.219 6.9043 mo192.833 8.46045 li194.272 8.46045 li193.897 8.88184 li192.728 8.94044 li192.061 11.9932 li191.967 12.4376 192.014 12.6368 192.131 12.6368 cv192.341 12.6368 192.891 12.1807 193.184 11.8995 cv193.208 11.9234 li193.383 12.1456 li193.008 12.6133 191.886 13.5372 191.304 13.5372 cv190.943 13.5372 190.686 13.128 190.919 12.0401 cv191.583 8.94044 li190.698 8.94044 li190.604 8.78809 li190.955 8.46045 li191.688 8.46045 li191.897 7.59473 li193.067 6.7876 li193.219 6.9043 li0 0 0 0 cmykf197.232 8.70899 mo197.514 8.70899 197.713 8.74463 197.889 8.82666 cv197.854 9.23682 197.561 10.4439 197.443 10.7017 cv197.197 11.1114 196.798 11.6036 196.459 11.9786 cv196.061 12.4004 195.709 12.6353 195.604 12.6353 cv195.452 12.6353 195.347 12.4356 195.347 12.0372 cv195.347 11.5103 195.487 10.7247 195.78 10.0455 cv196.108 9.27149 196.436 8.99073 196.728 8.82666 cv196.904 8.73292 197.091 8.70899 197.232 8.70899 cvcp197.396 11.44 mo197.15 12.6465 li196.998 13.4083 197.291 13.5372 197.455 13.5372 cv197.678 13.5372 198.709 13.0333 199.364 12.4239 cv199.224 12.1309 li198.908 12.377 198.486 12.6231 198.37 12.6231 cv198.276 12.6231 198.288 12.5176 198.346 12.2129 cv198.592 10.8892 198.884 9.55323 199.142 8.33985 cv198.884 8.32813 198.697 8.31641 198.475 8.27051 cv198.194 8.2129 197.971 8.17774 197.807 8.17774 cv196.916 8.17774 195.885 8.66309 195.37 9.16651 cv194.715 9.79932 194.083 11.0997 194.083 12.2481 cv194.083 13.2676 194.516 13.5372 194.809 13.5372 cv195.054 13.5372 195.733 13.127 195.979 12.9161 cv196.424 12.5528 196.974 11.9903 197.373 11.44 cv197.396 11.44 li0 0 0 0 cmykf202.708 6.9043 mo202.321 8.46045 li203.76 8.46045 li203.386 8.88184 li202.216 8.94044 li201.549 11.9932 li201.456 12.4376 201.502 12.6368 201.619 12.6368 cv201.83 12.6368 202.38 12.1807 202.672 11.8995 cv202.696 11.9234 li202.871 12.1456 li202.497 12.6133 201.374 13.5372 200.792 13.5372 cv200.431 13.5372 200.174 13.128 200.408 12.0401 cv201.071 8.94044 li200.186 8.94044 li200.092 8.78809 li200.443 8.46045 li201.176 8.46045 li201.386 7.59473 li202.555 6.7876 li202.708 6.9043 li0 0 0 0 cmykf206.34 8.69336 mo206.516 8.69336 206.833 8.81055 206.833 9.24366 cv206.833 9.89893 206.328 10.4029 204.919 10.8829 cv205.119 9.55958 205.624 9.00928 205.952 8.82227 cv206.07 8.75196 206.21 8.69336 206.34 8.69336 cvcp207.44 11.9131 mo206.774 12.522 206.164 12.7559 205.706 12.7559 cv205.013 12.7559 204.849 12.0655 204.849 11.5152 cv204.849 11.4566 204.86 11.3511 204.872 11.2808 cv205.988 10.9297 207.989 10.1919 207.989 9.11475 cv207.989 8.5879 207.581 8.17823 206.856 8.17823 cv206.199 8.17823 205.495 8.54102 204.989 8.90381 cv204.138 9.52442 203.614 10.754 203.614 11.8311 cv203.614 13.1993 204.406 13.5372 204.954 13.5372 cv205.459 13.5372 206.48 13.3624 207.639 12.1939 cv207.44 11.9131 li0 0 0 0 cmykf214.958 5.7876 mo214.887 6.11524 li214.01 6.18555 213.893 6.26758 213.659 7.53223 cv213.191 9.99219 li212.804 12.0064 213.39 12.8965 214.677 12.8965 cv215.987 12.8965 216.853 11.8428 217.262 9.65235 cv217.403 8.94971 li217.637 7.71973 217.707 7.07569 217.718 6.71241 cv217.742 6.30274 217.461 6.1504 216.677 6.11524 cv216.748 5.7876 li219.637 5.7876 li219.579 6.11524 li218.982 6.13868 218.631 6.30274 218.502 6.71241 cv218.385 7.07569 218.222 7.71973 217.988 8.94971 cv217.812 9.86329 li217.602 10.9756 217.215 12.0298 216.443 12.733 cv215.87 13.2559 214.993 13.5684 214.302 13.5684 cv213.659 13.5684 212.886 13.4063 212.382 12.9429 cv211.854 12.44 211.643 11.5733 211.913 10.1563 cv212.405 7.53223 li212.651 6.26758 212.569 6.18555 211.643 6.11524 cv211.702 5.7876 li214.958 5.7876 li0 0 0 0 cmykf218.886 9.37159 mo219.564 8.72803 220.43 8.17774 220.816 8.17774 cv221.202 8.17774 221.214 8.5879 221.062 9.24317 cv220.863 10.0972 li220.898 10.0972 li221.69 9.1377 222.492 8.5879 222.911 8.38868 cv223.225 8.23682 223.435 8.17774 223.609 8.17774 cv223.865 8.17774 224.32 8.31836 224.005 9.65235 cv223.854 10.2608 223.621 11.2437 223.403 12.2032 cv223.333 12.5196 223.309 12.6246 223.391 12.6246 cv223.497 12.6246 223.918 12.379 224.233 12.1334 cv224.386 12.4258 li223.742 13.0342 222.725 13.5372 222.48 13.5372 cv222.129 13.5372 221.99 13.2681 222.165 12.566 cv222.83 9.82813 li222.946 9.32471 222.992 9.04395 222.713 9.04395 cv222.318 9.04395 221.132 10.2027 220.676 11.0098 cv220.594 11.2789 220.313 12.566 220.243 13.2212 cv220.231 13.2212 li218.968 13.5372 li219.144 12.8936 219.284 12.2618 219.424 11.6182 cv219.845 9.69922 li219.939 9.27784 219.974 9.11426 219.88 9.11426 cv219.764 9.11426 219.319 9.39502 219.038 9.66407 cv218.886 9.37159 li0 0 0 0 cmykf225.152 9.37159 mo225.854 8.72803 226.776 8.17774 227.219 8.17774 cv227.627 8.17774 227.592 8.5879 227.463 9.12598 cv226.7 12.2266 li226.63 12.4961 226.63 12.6011 226.712 12.6011 cv226.806 12.6011 227.25 12.3321 227.601 12.063 cv227.765 12.3438 li227.203 12.8702 226.104 13.5372 225.764 13.5372 cv225.495 13.5372 225.285 13.3384 225.448 12.648 cv226.17 9.65235 li226.275 9.21973 226.287 9.12598 226.205 9.12598 cv226.088 9.12598 225.585 9.41846 225.304 9.66407 cv225.152 9.37159 licp227.95 6 mo227.95 6.41065 227.622 6.78565 227.152 6.78565 cv226.765 6.78565 226.542 6.56299 226.531 6.19971 cv226.531 5.8711 226.789 5.41358 227.328 5.41358 cv227.739 5.41358 227.95 5.70704 227.95 6 cv0 0 0 0 cmykf228.204 9.45362 mo228.707 8.89161 229.525 8.17774 229.98 8.17774 cv230.316 8.17774 230.398 8.59913 230.456 9.39502 cv230.502 10.0972 230.561 11.3023 230.561 12.1568 cv230.584 12.1568 li230.97 11.6534 231.228 11.2906 231.532 10.8462 cv231.941 10.2491 232.234 9.7461 232.234 9.31299 cv232.234 9.03223 232.105 8.84522 232.105 8.76319 cv232.093 8.48243 232.398 8.17774 232.75 8.17774 cv233.079 8.17774 233.325 8.42383 233.325 8.82178 cv233.325 9.17286 233.126 9.47706 232.469 10.3311 cv231.743 11.2671 230.748 12.6714 230.014 13.5372 cv229.561 13.5372 li229.537 12.5777 229.432 10.378 229.362 9.93311 cv229.315 9.45362 229.292 9.16114 229.151 9.16114 cv229.022 9.16114 228.765 9.33643 228.332 9.71094 cv228.204 9.45362 li0 0 0 0 cmykf236.283 8.69336 mo236.459 8.69336 236.776 8.81055 236.776 9.24366 cv236.776 9.89893 236.271 10.4029 234.862 10.8829 cv235.062 9.55958 235.566 9.00928 235.895 8.82227 cv236.013 8.75196 236.153 8.69336 236.283 8.69336 cvcp237.383 11.9131 mo236.717 12.522 236.106 12.7559 235.648 12.7559 cv234.956 12.7559 234.792 12.0655 234.792 11.5152 cv234.792 11.4566 234.803 11.3511 234.815 11.2808 cv235.93 10.9297 237.932 10.1919 237.932 9.11475 cv237.932 8.5879 237.523 8.17823 236.799 8.17823 cv236.142 8.17823 235.437 8.54102 234.932 8.90381 cv234.081 9.52442 233.557 10.754 233.557 11.8311 cv233.557 13.1993 234.349 13.5372 234.897 13.5372 cv235.402 13.5372 236.423 13.3624 237.582 12.1939 cv237.383 11.9131 li0 0 0 0 cmykf238.421 9.37256 mo239.099 8.72901 239.906 8.1792 240.303 8.1792 cv240.606 8.1792 240.618 8.58838 240.524 8.99805 cv240.314 9.88721 li240.35 9.88721 li240.911 8.88086 241.578 8.1792 241.917 8.1792 cv242.174 8.1792 242.432 8.2959 242.548 8.49463 cv242.642 8.64698 242.607 8.88086 242.514 9.03321 cv242.385 9.24366 242.279 9.33741 242.163 9.41895 cv242.045 9.50098 241.928 9.5127 241.812 9.41065 cv241.694 9.3169 241.542 9.27002 241.437 9.27002 cv241.32 9.27002 241.145 9.30518 240.887 9.65626 cv240.606 10.0186 240.408 10.4043 240.256 10.8814 cv240.022 11.9932 239.871 12.8003 239.847 13.1983 cv239.835 13.1983 li238.584 13.5372 li238.725 12.9053 238.865 12.2857 238.994 11.6421 cv239.38 9.75831 li239.474 9.27881 239.485 9.11475 239.403 9.11475 cv239.298 9.11475 238.842 9.41895 238.573 9.66504 cv238.421 9.37256 li0 0 0 0 cmykf246.178 8.7837 mo246.178 8.95948 246.084 9.13526 245.932 9.24903 cv245.733 9.40088 245.592 9.38916 245.51 9.29981 cv245.299 9.06495 244.971 8.81836 244.604 8.81836 cv244.296 8.81836 244 9.05323 244 9.417 cv244 9.76905 244.45 10.0621 244.829 10.273 cv245.534 10.6719 245.874 11.0474 245.874 11.5518 cv245.862 12.5372 244.746 13.5372 243.617 13.5372 cv243.176 13.5372 242.427 13.2247 242.416 12.8067 cv242.416 12.5723 242.58 12.3379 242.755 12.232 cv242.942 12.1148 243.083 12.15 243.199 12.2789 cv243.583 12.6895 244 12.8653 244.332 12.8653 cv244.627 12.8653 244.971 12.6192 244.971 12.2554 cv244.971 11.9859 244.864 11.7276 244.284 11.3404 cv243.78 11.0005 243.141 10.7305 243.141 10.0621 cv243.141 9.74512 243.21 9.27637 243.768 8.7837 cv244.178 8.43409 244.71 8.17774 245.205 8.17774 cv245.721 8.17774 246.178 8.45752 246.178 8.7837 cv0 0 0 0 cmykf246.726 9.37159 mo247.428 8.72803 248.35 8.17774 248.793 8.17774 cv249.201 8.17774 249.166 8.5879 249.038 9.12598 cv248.274 12.2266 li248.204 12.4961 248.204 12.6011 248.286 12.6011 cv248.379 12.6011 248.824 12.3321 249.175 12.063 cv249.339 12.3438 li248.777 12.8702 247.677 13.5372 247.338 13.5372 cv247.069 13.5372 246.858 13.3384 247.022 12.648 cv247.744 9.65235 li247.85 9.21973 247.861 9.12598 247.779 9.12598 cv247.662 9.12598 247.159 9.41846 246.878 9.66407 cv246.726 9.37159 licp249.524 6 mo249.524 6.41065 249.195 6.78565 248.727 6.78565 cv248.339 6.78565 248.117 6.56299 248.105 6.19971 cv248.105 5.8711 248.363 5.41358 248.902 5.41358 cv249.313 5.41358 249.524 5.70704 249.524 6 cv0 0 0 0 cmykf252.772 6.9043 mo252.386 8.46045 li253.825 8.46045 li253.451 8.88184 li252.28 8.94044 li251.614 11.9932 li251.52 12.4376 251.567 12.6368 251.684 12.6368 cv251.895 12.6368 252.444 12.1807 252.737 11.8995 cv252.76 11.9234 li252.936 12.1456 li252.561 12.6133 251.438 13.5372 250.856 13.5372 cv250.496 13.5372 250.239 13.128 250.473 12.0401 cv251.136 8.94044 li250.25 8.94044 li250.157 8.78809 li250.507 8.46045 li251.241 8.46045 li251.45 7.59473 li252.62 6.7876 li252.772 6.9043 li0 0 0 0 cmykf253.624 9.46485 mo254.138 8.89161 254.922 8.17774 255.378 8.17774 cv255.693 8.17774 255.81 8.59913 255.903 9.46485 cv255.961 10.0962 256.055 11.3711 256.09 12.2715 cv256.113 12.2715 li256.523 11.6871 256.758 11.3243 257.098 10.7745 cv257.449 10.2017 257.684 9.74512 257.684 9.33594 cv257.684 9.02002 257.578 8.86817 257.566 8.78614 cv257.555 8.48194 257.847 8.17774 258.244 8.17774 cv258.524 8.17774 258.781 8.42383 258.793 8.84473 cv258.793 9.11377 258.583 9.47657 258.186 10.0142 cv257.543 10.9034 256.371 12.6578 255.868 13.418 cv255.238 14.3653 254.77 15.0552 254.162 15.8506 cv252.852 16.2247 li252.734 16.0142 li253.986 14.8799 254.501 14.3301 255.121 13.4996 cv255.133 12.6343 254.876 10.377 254.793 9.94434 cv254.711 9.45313 254.7 9.16065 254.571 9.16065 cv254.442 9.16065 254.185 9.33594 253.773 9.71045 cv253.624 9.46485 li0 0 0 0 cmykf264.203 8.67774 mo264.672 8.67774 264.977 9.1001 264.977 9.9668 cv265 11.5142 264.296 12.8379 263.851 12.9903 cv263.769 13.0137 263.687 13.0372 263.569 13.0372 cv263.03 13.0372 262.725 12.4629 262.725 11.5606 cv262.725 9.79102 263.487 8.9004 263.851 8.74854 cv263.956 8.70166 264.074 8.67774 264.203 8.67774 cvcp264.602 8.17774 mo264.214 8.17774 263.651 8.30567 263.135 8.60792 cv262.304 9.1001 261.461 10.1426 261.461 11.7129 cv261.461 12.5684 261.859 13.5372 263.112 13.5372 cv263.698 13.5372 264.496 13.2002 265 12.7442 cv265.784 12.0528 266.24 10.9043 266.24 9.86182 cv266.24 8.88916 265.644 8.17774 264.602 8.17774 cv0 0 0 0 cmykf270.637 8.46045 mo270.368 8.82471 li269.187 8.94239 li269.023 9.97071 268.906 10.6959 268.742 11.5254 cv268.309 13.7935 267.748 14.9273 267.245 15.4649 cv266.706 16.0376 266.145 16.2247 265.887 16.2247 cv265.677 16.2247 265.384 16.1197 265.384 15.8506 cv265.384 15.6519 265.501 15.4297 265.606 15.3365 cv265.688 15.2544 265.817 15.1963 265.958 15.2544 cv266.109 15.3248 266.367 15.4649 266.507 15.4649 cv266.613 15.4649 266.706 15.4185 266.8 15.3248 cv266.975 15.1495 267.186 14.378 267.49 12.3204 cv267.701 10.8711 267.83 9.95899 267.981 8.94239 cv267.057 8.94239 li267.022 8.82471 li267.361 8.46045 li268.075 8.46045 li268.239 7.48829 268.543 6.65674 269.046 6.08252 cv269.526 5.54297 270.263 5.08545 271.012 5.08545 cv271.457 5.08545 271.772 5.32032 271.772 5.60157 cv271.772 5.84815 271.585 6.04737 271.48 6.14112 cv271.363 6.24708 271.175 6.25879 271.059 6.13233 cv270.778 5.86231 270.485 5.70899 270.205 5.70899 cv269.877 5.70899 269.62 6.20313 269.269 8.46045 cv270.637 8.46045 li0 0 0 0 cmykf275.502 5.7876 mo279.036 11.5328 li279.06 11.5328 li279.551 8.94678 li279.785 7.71827 279.867 7.07471 279.878 6.71192 cv279.89 6.30225 279.621 6.1504 278.837 6.11524 cv278.896 5.7876 li281.797 5.7876 li281.739 6.11524 li281.142 6.13868 280.814 6.30225 280.674 6.71192 cv280.557 7.07471 280.37 7.71827 280.136 8.94678 cv279.282 13.4747 li278.779 13.4747 li275.187 7.57862 li275.163 7.57862 li274.655 10.2359 li274.421 11.4649 274.339 12.1089 274.328 12.46 cv274.316 12.8814 274.585 13.0337 275.362 13.0689 cv275.304 13.3965 li272.409 13.3965 li272.468 13.0689 li273.076 13.0455 273.392 12.8814 273.532 12.4717 cv273.649 12.1089 273.836 11.4649 274.07 10.2359 cv274.527 7.82422 li274.794 6.43165 274.609 6.16211 273.614 6.11524 cv273.673 5.7876 li275.502 5.7876 li0 0 0 0 cmykf283.814 8.69336 mo283.99 8.69336 284.307 8.81055 284.307 9.24366 cv284.307 9.89893 283.802 10.4029 282.393 10.8829 cv282.593 9.55958 283.098 9.00928 283.427 8.82227 cv283.544 8.75196 283.685 8.69336 283.814 8.69336 cvcp284.915 11.9131 mo284.249 12.522 283.638 12.7559 283.18 12.7559 cv282.487 12.7559 282.323 12.0655 282.323 11.5152 cv282.323 11.4566 282.334 11.3511 282.346 11.2808 cv283.462 10.9297 285.463 10.1919 285.463 9.11475 cv285.463 8.5879 285.055 8.17823 284.331 8.17823 cv283.673 8.17823 282.969 8.54102 282.464 8.90381 cv281.612 9.52442 281.088 10.754 281.088 11.8311 cv281.088 13.1993 281.88 13.5372 282.429 13.5372 cv282.934 13.5372 283.955 13.3624 285.113 12.1939 cv284.915 11.9131 li0 0 0 0 cmykf285.816 9.45362 mo286.307 8.87989 287.114 8.17774 287.571 8.17774 cv287.898 8.17774 287.992 8.59913 288.027 9.39502 cv288.062 10.0972 288.132 11.314 288.144 11.9693 cv288.168 11.9693 li288.881 10.7876 289.571 9.5586 290.262 8.35352 cv290.695 8.35352 li290.87 9.57032 291.045 10.8926 291.174 12.1451 cv291.198 12.1451 li291.432 11.8174 291.724 11.3609 292.064 10.7642 cv292.333 10.3077 292.648 9.67579 292.648 9.32471 cv292.648 9.03223 292.508 8.86866 292.508 8.78663 cv292.508 8.47071 292.8 8.17774 293.139 8.17774 cv293.466 8.17774 293.711 8.43555 293.711 8.84522 cv293.711 9.21973 293.513 9.48877 293.197 9.94483 cv292.858 10.4834 291.326 12.6714 290.706 13.5372 cv290.238 13.5372 li290.109 12.3907 289.981 11.1973 289.805 10.0503 cv289.782 10.0503 li289.057 11.232 288.296 12.4961 287.641 13.5372 cv287.196 13.5372 li287.138 12.566 286.986 10.378 286.939 9.93311 cv286.892 9.41846 286.869 9.16114 286.751 9.16114 cv286.611 9.16114 286.354 9.33643 285.956 9.71094 cv285.816 9.45362 li0 0 0 0 cmykf299.912 5.7876 mo299.853 6.11524 li299.292 6.19825 li299.034 6.2334 298.952 6.31544 299.069 6.65479 cv299.268 7.25147 299.76 8.63282 300.064 9.51075 cv300.59 8.77344 301.421 7.50928 301.9 6.73682 cv302.158 6.31544 302.111 6.22168 301.749 6.17481 cv301.269 6.11524 li301.327 5.7876 li303.983 5.7876 li303.924 6.11524 li303.188 6.19727 303.082 6.2793 302.497 7.02832 cv301.912 7.76612 301.374 8.46827 300.531 9.69727 cv300.356 9.94336 300.321 10.0372 300.25 10.3648 cv299.993 11.6524 li299.735 12.9166 299.829 12.9986 300.906 13.0689 cv300.835 13.3965 li297.335 13.3965 li297.393 13.0689 li298.399 12.9986 298.493 12.9166 298.75 11.6524 cv298.985 10.5049 li299.043 10.2359 299.02 10.1656 298.926 9.84961 cv298.704 9.15918 298.423 8.37452 297.896 6.95801 cv297.616 6.20899 297.545 6.19727 296.893 6.11524 cv296.952 5.7876 li299.912 5.7876 li0 0 0 0 cmykf304.742 8.67774 mo305.211 8.67774 305.516 9.1001 305.516 9.9668 cv305.54 11.5142 304.835 12.8379 304.39 12.9903 cv304.308 13.0137 304.226 13.0372 304.108 13.0372 cv303.569 13.0372 303.264 12.4629 303.264 11.5606 cv303.264 9.79102 304.026 8.9004 304.39 8.74854 cv304.496 8.70166 304.613 8.67774 304.742 8.67774 cvcp305.141 8.17774 mo304.753 8.17774 304.19 8.30567 303.674 8.60792 cv302.843 9.1001 302 10.1426 302 11.7129 cv302 12.5684 302.398 13.5372 303.651 13.5372 cv304.237 13.5372 305.035 13.2002 305.54 12.7442 cv306.323 12.0528 306.78 10.9043 306.78 9.86182 cv306.78 8.88916 306.183 8.17774 305.141 8.17774 cv0 0 0 0 cmykf307.585 9.37256 mo308.264 8.72901 309.071 8.1792 309.468 8.1792 cv309.772 8.1792 309.783 8.58838 309.689 8.99805 cv309.48 9.88721 li309.515 9.88721 li310.076 8.88086 310.743 8.1792 311.082 8.1792 cv311.339 8.1792 311.597 8.2959 311.714 8.49463 cv311.807 8.64698 311.772 8.88086 311.679 9.03321 cv311.55 9.24366 311.445 9.33741 311.328 9.41895 cv311.21 9.50098 311.094 9.5127 310.977 9.41065 cv310.859 9.3169 310.708 9.27002 310.602 9.27002 cv310.485 9.27002 310.31 9.30518 310.052 9.65626 cv309.772 10.0186 309.573 10.4043 309.421 10.8814 cv309.188 11.9932 309.036 12.8003 309.012 13.1983 cv309 13.1983 li307.75 13.5372 li307.89 12.9053 308.03 12.2857 308.159 11.6421 cv308.545 9.75831 li308.639 9.27881 308.65 9.11475 308.568 9.11475 cv308.463 9.11475 308.007 9.41895 307.738 9.66504 cv307.585 9.37256 li0 0 0 0 cmykf317.071 12.5303 mo316.497 13.1978 315.971 13.5372 315.62 13.5372 cv315.28 13.5372 315.046 13.3853 314.742 12.7647 cv314.462 12.1792 314.183 11.336 313.938 10.6573 cv313.868 10.7393 313.798 10.8096 313.717 10.9146 cv313.484 11.1841 313.438 11.3477 313.309 11.9917 cv313.215 12.4131 313.133 12.9405 313.075 13.2564 cv311.858 13.5372 li311.987 12.9053 312.127 12.3199 312.244 11.7227 cv313.321 6.39063 li313.414 5.92383 313.402 5.86524 313.005 5.86524 cv312.443 5.86524 li312.443 5.58448 li313.402 5.38184 314.474 5.08399 314.567 5.08399 cv314.707 5.08399 314.73 5.28663 314.661 5.64307 cv313.601 10.4932 li313.624 10.4932 li314.078 9.97803 314.649 9.36915 315.234 8.87842 cv315.702 8.46973 316.111 8.17774 316.427 8.17774 cv316.79 8.17774 317.059 8.34131 317.059 8.55127 cv317.059 8.76172 316.766 9.24024 316.521 9.19336 cv316.404 9.16993 316.298 9.14649 316.158 9.14649 cv315.9 9.14649 315.655 9.22852 315.444 9.34571 cv315.175 9.47461 314.941 9.66163 314.789 9.82569 cv314.883 10.107 315.011 10.5167 315.187 10.9512 cv315.351 11.3843 315.561 11.8409 315.76 12.2149 cv315.947 12.5547 316.088 12.6363 316.228 12.6363 cv316.357 12.6363 316.638 12.543 316.895 12.2735 cv317.071 12.5303 li0 0 0 0 cmykfgrestore % PSGState%ADOBeginClientInjection: EndPageContent "AI10"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI10"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer%ADOBeginClientInjection: PageTrailer Start "AI10"%ADOEndClientInjection: PageTrailer Start "AI10"Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%ADOBeginClientInjection: PageTrailer End "AI10"%ADOEndClientInjection: PageTrailer End "AI10"%%Trailer%ADOBeginClientInjection: DocumentTrailer Start "AI10"%ADOEndClientInjection: DocumentTrailer Start "AI10"Adobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%ADOBeginClientInjection: DocumentTrailer End "AI10"%ADOEndClientInjection: DocumentTrailer End "AI10"%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 10.0%%For: (Rebecca Farnham) (UB)%%Title: (1 line \(cntrd\).white copy)%%CreationDate: 10/6/03 10:30 AM%AI9_DataStream%Gb"-6$ZdW'OX>DS5lHHOZ/H"7Y!a"$Ga2lR,C'!NopW<(dWchlQr$Uq[_t$F*Gi/+oBS'DbQO$+.^I_Zg"+q%b>t7X_BY2a">YNr%ib(L1hn?XMF`mT;rpEQhm*(];;bB.7_p485n?\bcn#NWEh_*@t=IVDc*fSqu[6LlOZAn*VN`4$pNpeUWh-Af#I!L3cEV]=qdG=KO%rS&u[T,mpJIrfpYI<g-_IrkUn$O7nadl3NL[r9U-]DQ,.^B'APr8K%j^:nu>aL/e]@[@c.m-%ONr_$O3`^l[sIeVCSG?8])m`uuX%mV`'bk;i(k0*2sgp#VZaL?HuEb:!,GmeHAGq7GqtY&i2mje!&JhrPLMhq`5-!:Z:0L#&-r)5Y3T<h63D/tUB_rZ;mEjd4$/C^n4u%QjL4-q;HP(b),9p<"?eCoB"5dlgom)UAZp'h)'oXYGB8#Uots.5-qTK"n]nNq.o;Pb<K6;rpbp&YKef(DBJ<'Ia<]Co'1gRjm`9.%l`:'0jS(8OjW$Y&H?Xd_s4c;/#H%LZ04rN'X1MH"f3dl\c$Obb:-GE,7/u?Os*T:qh;q"9V7Z&;T]R'&1s2_'^UlKfs7>>8#g=%]%k0<#T5MuDI@JcI44!-8\%fC3>1&h_Fl^@Iddf7A=+'^#\,BkTfk?dp=o?hLEYJ.W[rBeRngbF6KjnYChql_V**kqDc)L!p'SPOG'%fi5]c.V#&+j_pbcdgg(=_n>e@pK+O:CM"P"s+d%kOOX<nnpbOa-Ip#OjXmn7B.(0lNp^f36Z;SN4u;\Fk3hQIn+^,c9j_p`n(r".%l2@)YhrW@u4#7AaYMTbV=Sl=qrL`N(?X;cf^Y!t?^HTF-rU0,ts8)]E_r]4"`Ht)-me3i=h[TU,3'BDf3B]Ph3o-DLT$F7u1nKG#%J*Ke,;gW7Sa-4u9PEY$jUQbYuiQ6J1:?"i)nL*a83jC'pA3<%=4ukej5!%OB+!/bKBfM-niRf6aj6>2;S)a&&o]YB"puppTIrool%+/P`W'TW*R4.;2rOZ=?SVu)\Vnc!4:h]M:LIG2_if_`A::OB]4qf+SX4Zk_e5!1m]+!)KKLZpK6L-pIS%];[@BF`)YF?Z+RkG*;e%+3sJJjuA.LcYf?:h!t!':=Dcq:.K#j%T=FYL(mQW5.NKrRnOa\Bfq6mnL3hc@@Uhb0o"neMc7"1`%dd:PAhM%_EJro3M[3R#X5aP%"WL,P#Cl#7r38KWH[k6lT7$:IHggmnXZ(]NVs_JD]-Fe/LMh:W72MJ<c:uSFj2U>*3gl#+UM2q5:@j^).1`JCTA27tFu%N[:[O!%%[RYLZ&++1sNAamWSXlji`fB32S=!f-AG504bU/`kK(6jKa]N&s3/kBma4qKkI`qp6F.:3(B#M\op1UaNri]bcrTp$PIHCi,R*S)W%''/B;BAY,Yrp=+gXa[D@q:kn9q(_J]iPm5^o[BBr5CHtd(\[c@YijF.pNJQ(9_j7-S69mV9UX!9Ld[iU`.*t5Q6%9saA4/A.?Tab%@sX0rfajLVH_TpO;4*t$:S]AZj5o7Rb+GNNa>4=TLaVr?.J4-7a7:4tZ^9iOSsc/q:S]AZj+lE\T"<EK\+3Js$p>h"\[2)lU$#OL%,C9(S*"JAM%Z)-:iWt"-4FnP,:E_'o:22T_2tAbrJqm*XO%tLtpc4LM:X>^sZTO)9-r6MVbN"?*F\Ks+\l'\+jidGk1-WhToKS,R%o(k@Q4@b<B^NpC5du-bDdcu[I-S-;NUnLC[PGqlsg1+41nh7J!0OoGtrq(9;G`ETddIJ/C:tp'$GimP?(/NH+:utkFIdsqe1Td5m%rcVD&")9sV^W[%>VlIs!#<$1oBARllpHOu:LW=Z>_c^=kr'(F$6YTM62:J3pVbi@e=\-fU0:c"PCX5.I3k08oZ\,JR,pN@(IUbPm%r)reQ%)gPIdu+@5A/*F"5q4'Z7#qLLAuF@VAt\G3?^]VmU@[r?H&u[X1.Uno=m"$cT,nFu]p?dK9YN=u=,&2F`jM'rT$tjk?Y93q%O9/8.JYF3iZET[N22PggMOm+;8*0&'9KQ):MS`9j=IgVcL;l#Y"A9d(WM:,Lm%4(DK_iqi5G<9&FiI+n59aQh`.f]*Lk9UhP(?G"%7$giHK;Ead[?2AO8<#nK:'kK)(]pn.fmh:VYg;<JSAjK0aBWD!pIlHCTB.D3q3eQ/mB\nqB=U(Jr+U2\9t<\Vb?`?_2eP/+kIKe9%cUk%&Db]ZH.F2!XcWP8/PLl<PZ$i4fNq9&iRT\A*St>L`kOYJc;p$oS@@dddnr.gV:,Ar?bQCe8/Ua3JA"GjH4H&Y!CjMUae^G\b%JB?"ijlt@ZBfG2=GL"\,5#95>H!3DV_I54K9R4AGH/=R,rgr^D^<cEHELtcXZd>)`9iIYPI@g2nO;3:+.g#UL&0,?%i&")ja_WkH%Ku%E@+WdP_73#oVi[ARW-c`,fc:hib.;KneCE>3G+EQ+%p/rV#cC2l>!!*48AsFYU/?:G7<EYU/<G/`%jRfg`_H9<]2B&rBTH=2*%nuL\-OfuVc-qQ'i0(LU2h8Hm]F;*dda=P1>i[2B6E-m^a_Fe9@A[Ie!Oifu.ZABi`@[4l<!h8iT;Ff0T_DY@b.oI/I8]9.8EAi%\%gjMR1%N`r$Ne[nb'XG[HRH4[:=&5=shN,VTOFWap!-/'23$N'e4Q&4GW>J&[YTt5&Rkk/h$2bT2=<K4PM%#&Lhe!3obcqrfpdG4d%$8A/u6tkup<IU=I'0T3a`sl]n4qGV]I_pEfDj\gSL,6rqYcsU6B/`%m12e&S2#.ZOp9NR0QCfptQ)-/c/EObY1V)--[6!1qn+8Oi%eFP9`Gfr'qe2/3^>4Rt^SGB"?'Yc0a0sb.:aCN*c/QQqc,\%_j!%\!Bib,[)Zh8I'c]p0D<^-2aXU_meJW6/l=0qg>jQjW-)\@oB%VB5^[.o$%cIsH>:l#)"L%a.TC9eV.E1FX)9/bYuH5f#E,,pTH.Gc:5$>:aJ.'58K64$;aKcorXf+B\pe:tFSKW?Q[e8"bq`P>[Ro%&j4)Ib_DE_P_mm(-n:gQ'rWXF<0jVm%#!7Vkq7>2?_G4TP89AT(d,`Qbh\S,RYgYTa&>qYe?aTk:P+`cTT)5&Lrqb>,)tcQ[%=An%i#s.R\Zqq49r&"['Cqq.5p(u['4n:Z+G(VsEjR1t#qF@XWC^5i_F)2Vib1ntRRhF=4E]e3$OTiY,q>rm")&3cSPU8Ved7UaK"k5H%Cu;Io6:r#-#,H"]9M>dp,c*#l>m#9rBjX7^d_Q2DPgsl\U5(bV^S5CJLSAjH[O!8cXU8*+X_(G0Nd/W*WHqN@TSi#6Pbt0-SVW_F%`,$lk;:14k)]D+o0,f5ciJSIYo_>0&P:eL,Np&B$W?HCr&=m.7qPr-`c+`E87Ct5LIF7PBN\=Rbe+8Kp?Zc7@m2(2cB`(<^(TkI;%rC->PK.-agr@\Aj$-B$C2F+MKMB,MEJRT!$CLA(!+=JR&0abiMfUol/5/-5eC3-2?D@c<^=(`bc:U9X";s?U>F3rCi$N;3tg2HE*%Dnip^F=.aU^KfT#?U!NWDB#/TTB_HoaCFB>s7(n;K>*;N1e#gE44?HbA5FV0Q_BjA-Q^&.ic[s7O,"Gm*a#spro;[ck6@LcH&>>g%n3hjW,n)QDd*O)F%P*E!(U7R@UGnr"o+qArCdo'jc#?gc#+G(,mL/[VN6'^0c]b)Ub5B@r)c%,@'h4]dh[_OIo@2&(6_]A!CDn@-%(2$X<kB9mEH,aKVOQI_uHQXb$-:pBFC#5%A+-KUL,h\$M4-G7%P&a?]mRZ%ZP'BVtT:Z/$:YI/?H/+g^dL]8hI&lsX/5q,P[:Lt(%Z[o*ACb]DRN)8\jJX:f7[%JcNRMojOi&./jouJjB=.:5ar/bOs$qH[/GZgt>&pg#)"epjT+A_]QR47c5+g]-1C7J9;L7U0SUiB@U%[Ap--dEoOp3RXS-Z6Rc;:1[_1k[@4eQ\&mXZRdgGV<^MbRV8[7&5C?)N`Ga&;6>^ZFWq0XOnGWH8-N.M8tnK9#?d!HAu/'u-7`k0%=Yk;jl<^>K^!&20aFB6c\D6(hp+q)Df"Xn0G52P^cjtL&C'E0/PdVG)Z;^;NAZ(-urs?q9F9bqo@EjK*aG?="C?Ho1=k:]-2pfdm%98C0[a/a'i$q?P.&j;FY6(6hp=JK?5LJ(G@(Ki2CA3U:H'0Ipsb.8k%)"M-B=_Hc+!*3W5f49;k'XiSC.`OYEl&l!ZV4JM'ASm^!%4aB?!m$$ua*j%A/rZ,[H32XgWLaJ'D9cEp`JJ`efTDutXkCm-nROn?1AfqPA(C>A(KCs37PZaOlNK_mZTfuD1dHC)r&"=M#mJHWA%iBs2&em"aGUo0hn"e%[>3F"bc)UpqI%skN^1RoM7^iTGQB2C6/+8B[O%CEF;CtNQL_H*30q,WPgA][--JF(tB@7>?S[]<RLhY\c0%b$ccR/hGt`D]`EtIsH26qbMG9IX-?ipIDK:GM*hi"D_6:V`V0*U>>>!9P^`]/_tH=Em]0t.2p'X+4&O05s!,CW*PJKRqV.cqqJ<G%_ppQHT%#tl>sZh5=?V-+\CEqs%`;0::T]NcG-MILT9V2K%mX=&Eu-Jm^`N"JHfhYAqhmW1/:GVuT&EO*ZgDDiI("?U/[)NOT!b?I%L?mRB@e*c4;>gH]R(Q37hJ9601]F-W9t[W1esOVV;H[3RlUk__WN7J8U$@4u%m6lGhd!QQf(Y\:gQpAO;=0C_l=RYT*a"=6jirY\%D-:!T)uNf;ZU<-]U=eJE)RlehYsgj4;-qK;@[MMiUF`H@@\">4]NFC:7P@eg[aPI9e;L<_N:gY_2hSf3m*.i#=m]\-&$kAH/A']V%Gh;)i2W1tLYDmc]j5GrFdM_W+Pjc;BMIigdM6o3=o-?A3]3=%)(<q4o\$\(pD^"fg3j$l(Xj03uS:Y?m#<GcS@@e(#o1sB'8`K0E%?gMW42*'sdZ!)UhY;N7M;GWM"M/kUVXsZlI!XIE$8ntJKb78pR&lc<tTT-cXCr$Xf#)D%TCt@NBeT8)B_&F&'4`BqmW,&0i'6j?t%33B?c^6)kaHB_EQ5bd-$=F^/i"n1:GS*S6nG@+Xi.LI3g]+&FPn&C]*c2WOARTfSMY0T[f:6fb8W&u&WQ\/;P%`R>A%Fs^:3'IK,%r_SpEP:Y50eJ$q=q*Pjg#^V6cp*X'`b33UnrU$CJFdX^c>-\A\mLt6DTa8f)U3KV$%=u&N<?*L?MW.r^e=8&onZt2hhA182?rVRk%`V6,&?PFRjV`Z^)1T5GJ[IM"CZ$0gR_KsM;%,0k2p#+X'7n*2_,^=Q+KKhqXLSmQ8@jH;D8q]DuJqp6lpgYRoGY3X][5"ABHd1VE%Aks@^^L7(M;\%CLd)e`N/H,i*.2ro+QCOcSfj9sK,uRpF<l4OJC0e=(2E\;-p5F^3kH038f<_&NUfngl=KfTCf3u*g@_/t76/9pV%eNilgMS<>V=g,oJf46uh@Cb:2HDc$Vl)\+PMq+6,4u99&W7oOL<]]p9Gea'Y:c\jC1Y$Xk<dPAsMW\^nJlU-*TmNs:,0#oEq3V3j%A^Rp9_#@U/l4^.g7dHAolZDrR=!K^H`.icdlH=s]S6qgoh0r"3B)0se.DI9ss8<YT8#@T-]s2PknV=:lpP[,1&)SGq#HQg=DiaTZ%eF:Ab8,IjOpu0u&rU/n=_m`/5F'QWF6*;L]4Ql0'F&Vk]S,f.iWk\B%CRlQQVsqb`F=1OIk`a\IGh+A6e'I:^oTRUZHe$;]Z/J:P%;r2nLnZ)DcT)Tg&M,6J>?:Kj>d@r+Wb*"NlX^_Sd3$"hoYbY#BoO'\$2qk4SUsL,q=FHBCI+;tQ>pLg-k&#bUZ<]jI%2Q!_j,?A:%r=Jknl\E[,leVR<5$N!nGBX\Z7Ef)V9Z92BR?CpSj>&$2?o5O+%#5Ybn@*@Yqs]1'\$rj02j^^kh[*t/nqa^THjT-61:7">_`C\C%dG<\g6[nc0L7Vab<o!arN+^h?2nf''?F8Z-?@HDin:_T`=J9(kWKE@`(\R/aIHr)W]s,?]/,ZRec/N:qH-n0L=Q)]TGaV<51lE/N%GgS'KVNVh@ie8+R1lI^bjJOl+]Wf6\/%fO20@S%$B(<_F0:Kl'FRl//]Wf7[::'`OZQ1ZFaMBk4B;RQ[^s-j\FoLN]K@HiNU\3>*%AUH7cFU)thKDt"7#[*e)\(_1*,bO)VpucR2F9$[ss31siIN3jP-E&".a+#=ZG_5p'Mk&`4qJTu%:XD>/#o]G/s$lSO"T?db3R\Z6%homd,rf?R'\A?PP[[9V>B7!3iUlsQkm5S3po9=R^6a"D:O="JJ.BJKj:S4$2*n/Z<5&;3$I."MY3O0/k*Br6ug#"To%o493HtmIN%H8>Nna3aK&Fa\pKT5`EFhs8tjJX#QqkS*[djLmaDhp1TS'E)t(J"V9p1]VsCVae5qko^*\5X>ic0[qfU/X4![kc_o#\'Y-HXA3[M%5.<VKmg\Qt&hqCR3H2ZSdX1r_UL]*hrbTYLs.RQYMtZb:rDZ5\YqCLt&GG.t9`7(iFS+U!rRc@nH@&b9pEL^X`0'CTT+B8(<VBP8%D[%^2l9u"`Sc<s/5B];=5<R'iO"nK2Cd865LCH^TZU,+OR-M89YCR4DXA59<@NNh#9$nh(:9mo/L;s?:;F$j&TrOZ:W&Cr-nO1%-%Ta!WL,h2H7!N(piLki=TOU`!eRc?lHR"m%%,'lK'Y_Pg06+=Xb[+HPF*@GmT@#KH3UE;P-7*rG`OS+YJ\LqhSQNSXl&/=1h^e&DE%*+_.k7.1!-b>!IXQ:8Y5\,&g>PM[e_pQ^hrHb$.0aVB6<$]Jc[(;:FgHFcTHdhWuZaq]7u_Jbn)lA5Wo8VfhUlU99Y]j#ni*k(D&%"'QejqnNNAgu.egY$C<<(YLtI3S3M%-GPnhD`QgBlRpAOg69+fd&G1sI0in,(CimEION<L6l`<!E)7>jmV=B8')&K,T-\e_$P[F,%[>4/7_b@a0mRo%7lpH2q\dL77NG[cD`-*Th?3PVOG^G(uO'(jAPaSK+P\=%CjV!Ta`+^h9S4d\]Ln6+5-mf7G1tR'ggKf^6)LM=o%nHXhLnA-aHTXo$G`>r4'*:+jZ%UI/lJq/_9=Q9=pJ",?u6Kela;=NOK"cn>a)kP\5GkQ;Hh(?^SmdPcH#4E"u2lsFr5((hP$`H!H%CYRe#)[@?/pfMF,I7?=+Tkb&%*7d_WeT"@FSrS64T4=_Z%#_@8-Z\Om@tC3&Tq*!gcCe.-V6XUlArIMbH2jhOdfk&8Tq8_.*Zaa\%Km[3A4;.F7OIM>)m,r5^B.qjU[h-og@kHSE/@QB:&!&,&61-"il:o2IeOSW#-g>gBGW.1<*uPF>_Ltp)&UFUiqmO;"])mbc/dm'f%VSFSJ#ok"u-rA_5pd)@l%NF"&VJ"cu\8amo:p1.h$N`QhIR"4n54mG/I_b?$O5(1(FI**DC^L&ae-ihA5N6"0%hBiW="<]0Lmn#L%c];5eP8E;.oNt[-GELW7$TEod+6B-6]FXV[ia2<dg,7IS,3qPNAKAmO05G/Ok%]nP0>kUo9*-F9C:i/&h/+`J$Yhi,h/M3<\8Jc\%mqJ#PaK2\aAnY%O)JIFJ\"&b2:A9h+F8FN`V_ku(nCAMlQ%k^3hK?tn9ag$n^?q.S*dur1TJ&E-d9Rj+n['n$olm"IEp'E,28J4c%(tJXI_'hMj*9H\;,Pr]I6Gnj?[^TIMLEC;R08'.J^%2I5V&\"[rc+N:O#qe"+6WIm\Du31ELpNu4+7V\kP=e\j4Ed?SmRO?ILRC^%q=V8Xf:\W6s.XQ>rV_DHbE".BVldkLs(QIQgJlJmd&3gi)15Y3?@CM@IkPKeLQ.@BGQ#NMJ5aYdf_9P0bXgjHqdiaXmE\Q[P%VQh%^V7>Yo)@qJiTg-KcTY9CkPE*clSnSonWtoT+!*''DnjqQEd3(`pIB:4&+8:;I"$58o3heG^Q*"laAOp_Il"D!<1LXApMYPYfDh%a%rne.^j3I%@[JSd0N4W-os0o1Bnc+@C/Z#$"[meCZbg;iAIrD<bYD?$&b8!/F'4',Z91nr.OEWaQ.Bh&<OZWM2b-N_gm!+WFVcL&*%9a<+CX72h"W'mkn3N8S4RM5qf,X.8P"`t4#a>i5;387_a2rPkslZ[hTC!:[,S51_r4n-#)h4LO`h[V$h=h/aQX.Jal[o]acFk>#f%lT"X*l8Q0UqNtS&67NU@@>_p/Qelj(SX\3$RoZ(!=+0sN9(25P/q3gYP?<;#bX%p%a%?:%EMSjtDWEaA#2EsumEN_1;88O/^EMTG%e4<pFZhs]^;#9M3F_:AD;TBkP=Z!SCeACFWoF_c>H]U,PQ9sHS<"bgM;(%KMS]%AK"fWf1pF]$LpaulflQhZU(rt9laLb2VZ^C#'%nue1D3MRBo&p`r/fSlCs_XCd*1Nk5O^Qo!r7R^PX"k)'N"!Ee&`:&kfPQWK"7/XbiKLY5pr4Y^T2X!R,^.?271F>:hKmE*h.C3NF%\Osg@8_'T=;DDRAMK)Xq(pHQMaJr2J=JQR?c%2:X_B*N&(<EOE%,aN:mOAeNqF#pL9>l?EOW`?j0q_=\GTscMA-ZaB9<tTt%$4FO%l7*MN(9&-NQ&5U#</dkM`ILB,6.Sq@2!d@_\OTsP&gj>@4mje^n5,HB0PuZ"Kt9[(BM0Tje0W8]T+*=PhD@J83!lG*@U0lQkVS[O%\hjK8Bemq\QUUs9%=`1cp_Qh5pD?O.BU!T0>[1a?dM5<FXruHH'hFt"+PY<Z8=rX2DTN$sW>;UD),Q;(7U%^D,nn'<R:+I+$"/mS%0kmW^>nS_CPAs$b-3ChF9r0A%5+PMKV(7WkSY3(4'hFsWO]KR,?ohF(S7QM<XanX[Tn78bkmFooklbXaY&Jc\:2j7u$J5%:(ho7/%(uKPTS`$$9=7=V>Rt:)UY4tC4/>,2#@'((X:nLS2ed2__:WS@XF9:E3f6tVtq#mp0dH>8L8)I[Z(+VW%685slg"_gALEC1R884l@%pEb$f/L,i==E96V7>$lbE@N,EEX/]/fpHJ'mq:o+_fi#XjOo-MI'48OV2Um6&22qM@--:PNUf\)V/BR7`DQX%g9Lb.AM2/A$9OGF%RU,p+Gn3JgFZ&V'9]^])HH<7g#V'WVnG_3XQE?moW[W0G]ia49GE&WJs-t.X]j1,F_4K+#)S[5N?f(mR*4ft@lNJ;3kW0&7g$WDn%]\_R+/R^\Y(#:IoHT8On?.,n]$a\iXjh":DiSDVWl0ql:&??C10llY'JJ,*MYM(4,?dK]5N,C-j<_7Vd'sQom7AoG1\!Xkt;R;e[%.0csblWC8:_3.&f6fmHtZ4t#!")j/ZO,PA'#Ml5QX=XY3@ansn3ntI6083h+__"![#-H<dh*BC!%I8<UmuL0ZRat9B[2T1U`q57>%GeK5?o1@PcXT<?U!8jaPYsDu;nCX0n\#-p\#+;TMBPRTT%OfLaG\eR-ihH=H)pYl=Oq#!?[12dk>G\sDI=:q\E!<)@qul'CR^8EP%(!;'a&N4\M5";qYA_iSP/rjo$jX\,Ghd-991d/2Bm`-up/Qn,4P3%KGaIG62!Y;TQO9j,-R1ILo<D9?_cm=JsV[+kGUrl'k'2_4@%>#ju5)^j<.0h/".Z1_g6;5(\(P&a%T-t?K<oLk^kDXsp<_!@IgO&@$ZVNtg\_:aS,0LFfYeVS<.bg`>N)kV0if;KBe/lc1H@;KeM%g3YEm&sZ@3>JQP+m\9W?CMRf$-_"mS'+@oF9K&jrF1DZjKDlmD=T%bVFDdGmMlrIH0c+KX/fTG:/j%B;mJK8WF2KRNbVA0X@@A%B%83M2OO"-7mAm&jVAf4/s+Lfh!#5E#nN=P;/H7mD\Bt5RG#>0/P%Up,f0OpPkE#I"<EH9Z,1Y/9I,HZn02RbI%4"HdTAh)Fa'A-e<%R__+XF#GuA<AbFP(aW=VCjd@T9]@;r%=^HO_\iMfSLjMHb$/%aC5$5J(pTHiBe;tW37a\,0[7EanVS"R(1tQLAOC[aH)tjSEpk>i%TT;dJh#E25O>9)g/n>Z(-r6Pf(*JpV/>L7S]T]k%No:H;(9/qIOJ(;rW\IS@M,Gk1,a>0!Pf]:I16n7TlJp7cnO0[X;E;X>CJdO8%kVSkdKt480'0c]Y;L&>2NWap%P9llp*f)3PXJ/Q:Th<iod)mD*8OW$*J^;aUgI<AcYgi'H4Cjn<PU4fq?'Bi]la#k.D:,:$:u/V>%d?Kc;dE<B3g.7\6JbK[bcV\t2?>tM`;9)KlpE[htUJ@!J+NnS;I"66C:Ouo!O/eG.a,Q%c>81Um<%gdHR]iU8-OOT*^Z"GYE';tG%3:8VE)XL(?7E)EH'=cDjGT;Dr*e7j$!Hj2""ak"T\`H$?ddV50Gec<C:aI!@V,ZWV3nJSGUR<YldBraNF,_CO=J]PY!nK":#G67#%3<6_s!1(+CN_"E41039_T7E6<kA/u"N)Js<2cZD6\h:+L">#>sS<>oEF6^dIApVEGAl\mXS#2-\;A)MUG=[#=eqSG;2O>C4+>N+[%DMj7_@U(>GP3gMoYrqV8p=pd_16)-5]"&d'E]N&RR*i2pSL9oKAT#H1>a+8S.AD=?*(ht[$CH17WYJ',P3#YYFcJQ3WqgSm:9#Q&%aIP0\oLMuP7&^IMRnf*>St'"Nclu3AgH;9,S^nL@dMsG]Bf-?1d+WqRbWQ"N#aJM[fr0sZ7kO&;O%cAc"qYU,N?,EO/8F2[#&EjA%aJAKt%?oD]A*,*RNK1t[+_h)uO6kHkUJV_,J0rgJbq19bgf61Qh!dB3=jm1MbY)!#'EU+6KJuXQ[lQrCaTWc0W^8t/X-*o8kk/SW%fp&d[J-d&o%l1ZuhBl#m3LaZ:21DI11E`8hS1N2s<7O)56]#lc@jrT)m/P@2fpbTt(GdA;,psp9aNhKLOe!>lOe!i!W?6(HDqrtS%gVtg=)nT\7oX&XS]-d.cMd%,OTf5EaL*bi*)oJb4I8T^Eq6eTCA)'uVF1P]8ccNQ20.M9#A"fZ1F%7bFU4-a=FeO<Jnrs2.MKM\F%CXtM2<ioM=#3&g%c;eVeR<2CkFGLj^fmoL(o&n6.2MT(m&2W(c>p=$iGR`aP_IrfdF(&gZTQ+pcXQ%Ui;s`-Z)fd?tCqgo1C?Rfo%+m(VY:Z>?2kH9CVIsZTeFaFGH\#\9<93cGJ!Yoo=)fpr4hiDm5df+26KbpogOuq<+RpBtIbq,:gj]Rn13JXG^^T`cL8-$T5.4]fi%CdGA;1eq:[AsM&I'aS\s>e!Q%.*/EC=Inf$"Xf``B0-oFbX4](lqG5P/e2cfE=K4@@5I(m<H6`IW>[s2a\6]oh7JFgZS2[/_O-Vf%UjpY01(9MG\AkJEKIr94N.-&0Hcg))V%B"\r$dJ*N2a$;"f('g4d(-$Y\JRg:P=c))^&FnAe40Uft!qCX.V6Xi]"<3qA3V"e5sBg%CP@3_5DUEK&u(,@n/!$)_C"XF6V$&0DHGoo7`!G=I[6NBFLp-,Q(2J+V=f9&G"%F6/M-=`.rk_;3R9TUqqs*>3kr5;I0J5WqNEum%cUoY5K$EZ+7uOQmRZtZ;pEb$f8"CT4S'W]IN9F\Q#b>Wb"F505SF^Ps<[$Ko9C7ILX"G.I49[?UXS[Vp#1N]9X6Cs^=To1=3`M;#%+"42$8:WH>3[K>T=5Y94jftnUGi.OP0UKAXSBc:H0(W+AYlFMm^#+Z@mCO>9AmgSC>r>i7rE>?+1dl+okipZ@`O4cqIMg(.B@P7Q%UkVpLo@ML"I`^8k0R]KA3AnUup%tcBTke:Y:KD%Q8n?c*7H(RaED*<rZo?ahfIBd^l'ds8/P)cifc\sKDFp]U=VTHN>8#bn#eQ5<%FCf3ElXDpG`jMah/0<Zop5:CmeI,:34I1C_]!eD_CK/sMXk.@bhE6sJC[B^k(,cAXN=N$0iVN)HDo5VJ01VkXf_$D/df7&Ze+n33%3)N\)jiKrO:7/+]_7iUl8'OT-g.Y8!@>&d>)H(s:h:BCSe-ptlLVpibS#=DR:Yfb9(Ah#Vo\2%LR%'(CT67Y[\75[FQ,uAi8.3U,%(9as5A1IdoB=$)]-/ViuP4]*N]fN3j-p[3;+.UX+<<U+lJlAJqDjM5!e\a5BXUtWefTP9rI9._uWZl7+SZ,Ud;"7B.h3'm&@C/>L%a/&k?9s0bQ%<hN3WjYM<71Uh;6%Ykc$C.ZqCOt)h7$>!!-<F<;"W/QAhDNmMg'FH+Q`?nJZ%TM82heud%!Iq78t(_Bdb%)G.Q/J'%<]jhJ7/0=7lDn*]KbZ_Z`(GigYYs;m=E2']9tZlo'L6VPH2;h&*Oh[UOYgfF;:eoUJM<='ZudB%`j`+-)BoTdEqOQ,nENRk8JS5U%4=k0RG"WHJrjkS8MD?'?AjJ#HAW2rKBY@2u,7FKk(imf^9#_('h5Lqh.#Wi-0C.q8k2qLt@m.&0d=5sd=:Q1=TY2pj"jIol08X#?%>&iF(Iqn\&N1nfrf?/Nr-CP+;,#3I0Y0cj=FgIgLFRsO#kt"_[;P:3dX`d8BGjDtH@O$ThXf'iJ[Cd3K5XadHFj)m=H64*@<^U-0%LWaB"+0s%8G5gq/o")!.G->FngQ[IUS:0OLLEC,FQdU\bqN<qm;b%/,-hSgE?tXIh\KT=OdH&JZY]MQ<k:5gl_d(dbVs;4@H+.02%n*;$IM9dun7jcRib8b?);f!3Z'+^7!1c.la:8ks:/"jU$1-el^09A\3rZHGUa/!=sD]p$P)P!G(d@)#'<9eU)!>3TXVFmq8ZLii1%f+R2QX0fZm(^eG49U>1fcH3A/8&L,HbJI"c8[`uBjk'kiOkf3MNk=H6eE:";jYIUIG\Yrc8Z":L_Qu64gbR>BG:<>T'im_H$?#M`%l-D91GautJ48-;q>@]\:0O_tA@`V5$&Z6O';n%+?bq>Ma)Q3FhmY8VeEj!8q4IB#g<5d"@;N=h!ZU2ZJVEnZmeQe=5e!<m?HXZM9%.[JZoDL4j"DFlVOO`ifAk'"4Ih++c=XRtd:o][>IO(6l&F['[^.tufdQc80blf_`n"/U\617?C.%J`D:"K\PW)<=Ne(>^$"G:;^b%?n0bTPM(T9A4mFC#VhT=fK<HcfW0!;WX$X>[%`c)2)naaLkCiC.CqXX?I7aiRZY6D!bNmkApG;3-TBJZIis3\[W@`<)9=Qa#qQip%ac$dA'79kVUl5sUf74Z.Asch5!:+p3X.\UBCRTLg,%8kCX/p:9KHKF]f?^U:7u@Lrk0Cq'g6\T?j#@uP"WZ3J0uHD8Y[cffK3SO]%=jnK<4U#2,i(7]],fi?S?'53*DFX^88b&&I$3'(H!:XARVJH2t)LZIO`Z3:5I?T[4@fZ;`=OXYtri+J8VNZX'*X8G-=jeO:.,B,@%jDhU#\NcSpYr!Q_M1[mNC-KP*DEc!nAk6W"]Q-0GNDf?[XMrpc2]q@-*\"YuGm]Hc7Nj*Dhm0/+^SK@G+@IVU:oI4/TTVU_5p_-h%67%7TJtbVt"@\(q$'c&G$&&pZ&dfql,ZIZt-koi!=]dNNK884)o06KorTs4Q26Nh(Dko,)X!7:IRPVfFFA%T$@BE`MX!*PmbfD69%Z8pC#E:[0<n#;S=NK:&j9`MQqK:P^=j_L)\[L@\qO?Kh)qVNX4^t\0^#'QInE'YkNaP(53]:%g8$3"uH6=mG(Lu-5bFOY[l4#-p$%bWq:W8*'ATCOnT=.&!?,JNW4qklA%Ll:H*S(`qa%:]$A3^V`X.>Y*euOp?T+kD9<h2MVhfGn+>mb[9>]'G%F`$a7R<0HJ9ULNjd>%C0X>G4=Rof@Ut/9S2<,B31"0H(iFK&'FQ2i/unM:93/BmP]NKD>8'T%J0u<L45<FoUS3OO>i98c-^nJFA"B%NQtT.?UF5en1l>cU%HQ.6FlSOah0tW<a,!XHeT6Us;*72f#NCGNkA&4Red>]rr4.cF6<ibgV1[Ptq0.dU#A2Hn*=JQd&=<G_,T0"DqXGNe-+W.DY'A.St%XH*[*?8F%pR08`i!A&JY7D't+C4UMOnpm64A]G.eE6lb?q[#XQS4?P!NHPSEQ*O.-p2_d;&0OLaB_m[$@NKXnm5:e8,Bt-)<)O[T%A4FZt.6&f8hLt/O/M4k8-/=<O=jVLFGX@0C9#E#tih6ongIrpP(^"$Q*NP2UG%'T%;Om0Z(_E5chP&fIj_)7_[ol6,?b2A3/2./E%lZmCW\fAbj^phCdOgE*P>+dE,XB7N;iC97DR^ACnPQHb^hn#d8l%i1?;2hko'QOlXgLt73J=;d;UVk=J)."!;,!e!F$p/ls>Qq!-%W&.Xj*CbYfOj,YBjh@*"WSHad:,msTLekoS)!NGR_NH6#$i4^Lo!*s=r]3)R1F>S!@'E@g"Y+0ghuH8(SZpg6/pHe^b>V*#RYgs#%K&`Zs^lGcPQY;hbJda6@B)2\%P2FXhF?YJW;iad9G80T;jGbEAm-Y(tG17=qfdr\"Yr!uSh!XcQ8TL4(SD7jH1,ri;,j+7e,%a<=%_aM&&RC!mM7L2?#"kM6Yj\s;e7q'2o=<]nam&ZJ7Q8723R*iC]NgWr+,p&OF.iljZ0/>qg9+s>BHF.N74E/Mr=7.E-MBj5tIi4r:%-%RaZXO![dURT>qRM02i#UPs2K*.+VJNDADY"/a_@4h7&-MEEHEQ9I:;PTX>7RS/M.<oC^$j=D.%OPeI`,Zt_>5-7,Sn5IQ:cf9m%XTf,`S;9[&Qr&IL4C9@<0ELq.HZ7bqj9b'!Q4,?`jSAqARQ_D'Z(>G=3L`;Z_C3AI@)ogONR*aOjX/EJN$VZ6>$5H8+?`Ff:?2l5%X!`U-M0T\^#VfBYZVFel:uS6G?ojYn*1p#$X8lYDGN?$tnjJ/A`ma,\#<aVB4.="!($<Qh`%s"m"E]L:P[\?9_&tU$,g*b%GC.Qg%NoutW-Bt@NfU/_PXg;@[=)@&FQ8TGf0c:%%MM>cMYEO,<j?_rRXfg!1k/h>5a>7u`ru=*V=W@htRMhgTi7LC<$hHS]U*tY8jR$.h%Z7*k"J7g?$FuZF4]u<]&e`A^uI5m,t,rNs^9Q\E(Mi;`<h1271M2mgFhY7h&a+6Od+`P<?@i!I"Z;eY6e8^&/khs3K,Yi;&LVkk;%)1%c"C1eB/:r"O!bR%sNG]n-i9caX(2OTCkfgt%0#n,*JY"/rE$"SRe0lJL<:W[:&Q#lEqG:h)A,l4*Qk;tkba.4k#7ug+UZ*te=%a<Z)#<e\T802C^XOA)X9:r_8s?HluOa(WD\[ka6mFWdQ9S:LZk=>hKe"bfW*m2+2RdRkb*j_25U6=SRbINhc=gIejYYsi/9j?uLr%H8>>[QW?m[8POA-mPSGY9*,!!%-$=_jr.$Ed)&A/FUW"0I$-2o@'tsgS0n60h<#%bc2B72iXkC=E,sI1=>5Dl]r2j;k-,qY(3ZE,%%e.3La<u_"r0K-(["M+32]HTJ31d4i.WDbJVp,;89-1:U0#/?\ghJPP4<g$pD&@LfPGD:b3$VmqfENC?U=I6acGbaV=pHj-!gs9Q%h_6p1'U"[l>dG7Q*d^)E=9uk'<J?0ai%=?2M2_M:N@RAVL\<Q=,Jhk!<O!._-nmM_$.qD*R7YC@S6Y(+Up(MO3\n]a-[<j\<ndp%%a'Ih:-fAs?28r>[#nsX#'/I?A?d+3$7NB`d!Zfjn=S'@?$l!.tKTS]c%0\dGgl*1c?8t"ZMkL]dVI/\Ci+Z+cfa36&3jB?[GV[65%^g$(4Kn-mn`DFWUa'ch^nDKb2/Ht'h)2g'M?j219/Hm-M0i;-^!NLf)Q9q70Vd_+5%+?'#V%B:'\RI#Kd_KC&.0LWIW2U596=*YS%BOE?-%)l6idT7q%[K:Tr>`8iID2>/.$]<YI/>1hZ/EVP>=u7%:J_n$t(H`C<;p5E8jrQlE(VCtf;>*=g0lVj!$]%QDMRe75@KVFs%i%Z7*@P?(JiHG/rYcns`;SR$SYf..uWXsd`k=i0L.uOGe'1PnOL6-ahlt&Q)JM@Z`MZII@]GHJ,LIB(4cR+/0r4/cCYS].2_"3.O%LAZWlIl82893J3&P9FD'.>c.XGZUD0#)*)I$ijfZ@ZqtN=Kl6iKLdlN9SO*LMdV_L8"Ht;OGTW.np;\aV?jIF_F-ZofOdB^3'Sp_%6!0Xo#+Q^'fOVd[BOrmUll6:!(.0\dP8nB4G`fs;[MT&f,\DrXo<\Z-aC;sD?Q!5'A.YnSP9G!QTN,6]WeNpM)*D1&k$g1B6jC=A%%<TP5Bqk][("i)-d?*)a;%o]jKMiZs+:9dF_IrrKi#aiqd"",*X!%RmElDe/S$BqIT[4-J=,5<;%'bgp%3Th9`G,[GXIQ^;!_tkh%@PqQZ4KCt]2'DV2'XZCULY\k;2<6]"1hE^2F+Bafd=BQj(8CmXh-qj76V)<D<ETce0>R8pXG4s7(iRB.LjZq==UgMR:5dYQ_PSGV%"#fJ'n\TI$Le;rFT&b(.W%Y6,k\0$WG!jQ/&Q%hKaGQXr)^q)o<9sgZ0ajl2%Ihsul[3M-6s69o])eTtk#A]\`#C/S"^;HK6Ye6=%6UH<Y<9E^]%qJ'Eb9>hD?SNO`@h"MImJJkt3fV$r8/&!"@Q5V]K:s+l$(HQ:)\*1Ts1T<[acS6;(_-j>K@>QB$8fb\iK/"@eec4I%jgi,W-*e_`+HWQ>%f't3-SZT;Zn.5niIHY"YoA3M9F\9H1<rHB7^3p'B>gecb5iJt.$d4QGVh]j%LJQc@QEN!cj@X2!%iWKQ:%O@%M/tBl&g*bndinHfoKerVM7$59*UnfoLeS-=Iq:]0*-\!4m6KG^(ZPO7arH5UD<!Slius!b@PJpCkYh7^N!DVB0?-A$1rbCBJ?tRO%'<k6-c0&O9i$>1jMX^[!\!&]kE,7;^@Q[%p;b].<eBB@"*hoKpSnpPtqVi(6YT<k3#V/!QHAI:p8_-7>,=\biW$W?>+!?PZ#f:rh%7I4:GLBrOB/u?I7!+ogmp&jMgbcW#ob4tJ]9pm['Y((r8HZf(5"#K4rSTs9!;HM:C[UX"Nia\O(k(C7MS/-%(DoT<S1E%?6/El[!%e.+MhQ$]PI.gKOfS<PC(>;W>l/#7/Co\WsObeGcDY""q-I`IRr8P_R5nq)!%$dHcZ3-G0j5;$UfNrnI,-ul<UU1erX_&B7=&1^T]%6gQXM(B2i<jEIUj1@T4H<H5rt>!WeM+(NF-.[p8bF]/Ku<lHn.,ju7FNlbL/-(JVcs6N\lrcu?O+DqCFDg=7J2&!_Iq#r8rZ;G+T%,u[IQ5:IW)`LjY>cI6M]-o]l9e2Qeh,+*7Zl[I$oc2a^Mk@s!%2!BpF<H9q]=!lj?p]K'lkpoq#U6Q,IPrk8S:am;)8Au!FKHubo%Pl?kJlIs\#QD/AOOG,o=NLZos?;UXuh[\]S3YsFd-(XZAY!?RU)Hnf-Es>:GGfa2"+ESX#\nQOZn(cU)m.C+:9=gW`"Ss]aLda:=%/[Y)RWhZ*XU6P&Ci-4*P+oG,)P_VQ@^BfM*ns1%M=n&!n8e[47SHrFg*C6=@@/3X\(Ym16gdFhulE;gLcQ*'$c!$ape2M(nW*MHK%s#o?o+uG*TP_<@'-R%#t>Yp8)%jGKEcSh+D,;*:9?';udU/LL,N_`ligi2L/mR8TpIO"kiV1#IB?9'<UL$EUU=k^bU3S+8>XUn'+%M8QNeSr.Dg(X1X2]UQ[uPkV6cQq#"P.,Xq3#3BLC'sE=SS@h_iY;eC(:Lg=KD4(=)-BI=bDBGVDIW^,:lL&8.EHQbNI0m<*!Pi.Y%Q>-pCQLkTfqHsh]ppc]jXfS#g:?AaU:b,ndF8E43rjD?qJ`b9>Ei0rXfX9uHI#e-]N1AdX4bgYg5jLlu$q\)qO-(?HnP$25@@^p:%/#Ae)F[EhdU0+)=LktF9"?rPKEiaCqF"?dp+;QCT26TX4/;iUb]0I)KS?p;F&MHj\?]#nMZ!nn67UE-nUU(uh8GlM-M<*G#e!leh%X\<'7L!p(lEAU^n7)g?f/%I)$@25%M,:uV,CbSAbjCh\J`a<@o@WI%Fk^k@)8>;Y'a$sd9(H>kr9.!.BMk):@Q(MW;3ph6h92d0e%+=ChmnbP_u%36^S][MI=ThSM?$V9oAXToPk.!gHk-D)Ji8,KL@dDj$[Yq))^-$A9T9C1CJ\48]m:efHsZOeRLS2u@jnIbN>dH9-#%r`0BjdM2&Xd394?*6IFRfs[Imqbcrs29n8#=(O.uA'kC5[S$^<PiUd=i%RaP:KI&q\^1o6i)27dmm]2)KKJ_<8s$K;lO.QcO]UT`%GjCpV1`P#R<t+h'C:uA<#",TH\M+kH"n(!\:8M%-CCEM4fMjg=]n0e=@AR%%$?K>/SJ'm8%SY%S<dVe"#,>KZKu']h3i$Oi!j/G)%/="G5_.]$d+gfA8K76Mec-Uu]_5RT)rdL#SjLeAK^JX9@&1RZd!@hkg'qMq93U>1[4OoVB(:`9J?Df?p0sDYXGX%@>VMRqYc)1iF%2hftj==3bVO>@S((/'T<^*8E/G7(0\FdhBP!]!KW^HsHWm$9Vn1^4QR$t5Jeb6J9Wk+:J7HdX-ERpsG\82d\`N<%/NkY+A?5&j]#%1O-HVcb=]pY]IeH1idDFG^Y0rp`ttV`)!8;"KS\El:M_:/[8C$7#-lD^q4(4e5Jt%OjEBgApEL0SFSb;CJt9@-Uq)RNG5#8L4)+'%PXr#)*Z:K=-M@cqPb)Ss^o58!a%ZIL(s([V7:T.31?k;A#MkM]7a,L$]8F^TLRhp0G\C1jSMJQROc-*H6QOa#%'qd_=pcfQ@osd[%iSr%3<%$BbL.>KBoo4Rk?#WsJJDX!p;o@%0GnCu;MuU6)@r3+(A[u;PXlOT8>Z]'rbO[bQ>@US]*%e*Zg).\ClesUd'!6.`'0K3r%9\[D1:6ou=H.9[p'!(B[TNpOi)Sem@1U3]J!RGIeCGJjXR]lg\Alec$>N@j.')+.ndjic5G)'l#"mekq)PX3mQNU2PS%shSl?sjj%ahpuW1(Hq`bJ5C_'\Wo^HfSk&1FK-LC;+\o-gtRaPqc_eGZ9n.I4!:[$a)ZRG/5H-$Z%)mk0mb=k&g':(aqa(*-\7]Ti&akm)_,;%r)Uj,JT-+*]WM[p<46R00(uX:kLa@*X.j**2.ndPa_!Qo&j9M>E'7[;+%/mbT`t\SE[&hHGZE%+9MDr:lTd?S*Eb_#"s%pu2I45i%g,o!Z(kJ)[i@"?%N:?6ePN>K4%]9@nZ+#tMZW?$ffn_RX9Ukl4'htPji5%BJm(-o\>9R$up`apWC`g66=3;#<>3(5!$NqhG>2Ji$%b&3<'mq\`3;ce-,q8"kIj.i*<]otZ6ZtU;dS-OUo"$'GFPDl>g![=dd%7!lgp7d0m+T.$.aYr.&q-qL_r=+cU'DjR&ns8s/2@etr%2gHg*2@s9),QA)(RDBpT_@%;$(+RU%+\@'NVo2hlXrXc%26i&%8(sgqljO1X+MX3+$*o[^%=V!%>au?4h^*"BPW21rVF*o_(N;T:%4&BrCf+$'7#]pT7LtkCN\%Jr'%Ne2:hGN@jUMs7d'Y$-3/W.8(nSXHOMeXt[i1@Q;FOHS1_qV&P-B]BfMbXVab&=)>7Pafe4fj4b%rPY.H+<^`E=d,^=^qPeEm9W"`-A$3Q(Q5ub'\6Hm$B;Hd<Okq.MjtMU@4fRu3,@)si7h(1$[S(ZKs_?T5aAa]-ADNLbZ]`9-t+]@%<TC/`$RO,rYSR'(]>@_Yjk>T[gbR]5:nr%+OSAlG^=t`sA]3LX\>*R*1f_hQpTas1k/eFBd'O<V3\,T$.GhEWSat]li9,iT<b0'n%M=N?a>f06RP)]ukCnC3;O@Uct)\g/c&O\V8o]Hl]L7D]i!*2j2d2@4LA"!2Th,*0NalYQp\Il/F'FL@U)X$[2db1KdR?Oe8ZO&)g%:Q7HB8/ZBonT18r:`:FB`1Y`=b+MiZ4F<@+4L:<YgVejo:8*+Y]=d1(m'3TqnsZ`JId2PFa-i"[<&K>(C<je]9>&7KDeAPba3.SD%^rRuoU>ms>BcQl(Cd1BE!o`6MX#<:',6]jakTi77/o2-*InZ9b&G"V].mJdpJJ!]*![Cj,$L'TP)&a`-0:&IPd\nM9:#Q^4G0DjD%iFH_&%&3o#'gAc#[0d[(?OmRY$<iQk#_L:]6VL2lfbU0Y.C=C):Y](&?nue8C'k[5REiPn:99P[]b5>+T,'BJ)NB_-1Lk+3^o*#V%;qp=$M>K5Cob!4`NXfEA53b%eQK.u9&r7\e)K(7l3jRLY,%ZW/qo8dYUo2s9pnfHHN*/+H,!9"L4\*VN(<.'6C;#:$;1)Y[^tO;^%kOub<=ShR#a:LmsI9U4f]_(60OhpY;O5p6#,nN%)'`JHHoRiF6Od'9*rEqAkZ3#WCXjSXS/cF$W*IE8tG.A10Ce30?f?uDpYUcsd%/1onm5kn_EHR>'si\)@O6KPD=Z15b=1EQj@7"^ne7G!oBUkM<:3nQP(j?1:4M2r<,[F0+X^g&]39WTZ4-1;:QV.2LeL13*$m+4R]%cpX*fTRE[XmL5g$noIZtaHOTl5S(af;EL$i;7n)dMP14OSLAEDl)>Oir/Mb@?<nWV@/srrDB9fOd$!6e0NO_VqJcnD'5cM;$X^n*%$;@/6/REpi@;@2eQVe.!?9`0j;.u_jiH8-A[1'1KW_lDi1h>*fRa=O+*b@3DOj_b'5[K+R#@#)8=ePG$6P`n)X4;sl3FC'#@dJ6M%TulV=Y%gUaQet&F.YgJS$K,iZ1fIV"AAU?1`O<GQk1M$1R+@CW7E*mOp5-cC'-7f[G9DNZ,2r7Gi1*oX4WBn8g=5CZ(,p#''+=NP%B3SNA/R9n]n]GHD+t"/lM5)GT<0M1S@9R5n=#3Ote%paEj*/'ULJEtg&CF]1p4L#1*5nP8c^1\@4T?2OJ`;N5^;NG&ZAUJT=/4hL%Wm&sC;20_OhoO<.ZO[;:cr$.HVn2dA<9VTT.8Iump_j:QdI'HbT]:A(A6ZJ6<gQeBk`R^Hi+bhY#qE*3#X#4)FU=!*I%VgJb*XNd%QA/*K6YCsE=]Lm3cPoeX,.#=7^9`RJl1n:S*M)+f8Y\:NN`#FBWeFke%dRZ6(f!'P1%CcOfI2T=-U(E0("-:Wj4f*Qf#haY`*+\i%[qKAqqB\#$Q/7F&-F_F-L?[fDTkd?`j.s"UM_ZYc+_MHf'V:T;B=Vcu'Q1`h7.7i@hDne4Y_j6Akq5H3/"(>d?HO3+A)UrHInD2O%]Ti!JQ0TofVH2QLq>7s$b!p?gY5D%!;PLDEn#">#.kCId74\FJb[qkLbOQZ`.SJtu$`YDr,)/D$9qc?KZ[h$T#_6B$'ZI`!'YRcP%U=OBLdJ19%Ae8?E]\3IOc8R=JSTLEccfe8R;o"O4,/_Mj-S+_!aTUTJh>C2F8bP'Zd(kLca&GN>*qg'fs+QomlS<i<RhND37Q6"I%1oEeS9QG7UENGW#pbC1\!]>A`J9Dqrm"$ZsLSaTVC?WGI;F_3\B.*ieiYCZsK;R3TCs\$<12:Jb'jIU[_pN<.r''XV4jnIFZK4f,%XU:2oZ6]oqb;^);L<u2"=r"a[eP]:04A:,uM_%oV7*/n`&?<)Y"=;(nTh)\hVVi9rV@<jeh=PGcC84EVX`R,tPu@6>!6&HFF&>dM%BMhmKJIYpm7/&pnl&Wp+mZ!u?-'PIB%ukB]Xh8$K9lsQVAu@"@e+kuX2JP]BCZdk<KoE*q<rAX@3V$C1[]PZWKh8fE!6lF]*bZuc%dTTpsI)N'jU4P0<KH-WA%>GD!9GG>H-NS0#a&Y?Z(,0>1gl_JUU8EGL[!PM;F(3n[NW^1^mlVe0+:iCh9mjOr8lOsI2KHY?[$cU-%2a3A<fH[NK%mJ6=2YU_k;BX=DQs+#neMf9B?,Y-e9pUi];I2Nu<m(,Y%h:W)T95r<[``HQAN'moI$-F2AZ'EqcS7Rd@j]p?&V/u'%i8X#pWD*AON9"J2V,Z!(9^gO>S^/r^ot!o?QZT3T".nmtFSFq'`0b>TG:`#=Ma]u`)=d=fEFFpN*+DN#**op)]7W*MRV_7BFtDY=%P",jToLo&[J+BfC]>GO5`Ke>7ONVCjXa1mB@36aULQHIC"MV1o0QqKn>qR0s=m:;[oKPAl"1(aSB&Y@"?Vr@%-,*tC7d#JjJJeOD%&JSk%O$ht;2W<F'bn\'`WFk<<cEjV=PVs5/b.jhI7RNV3Mq>%toK7n"QuSH9(.JAo;?`Gp[/_0l$+6"$UFp9cmFY^!`AQ&K0D%kP%CIsRa;&=qO";_0Pjoej!:!rJLb@jd*lOflVU7gO-T$YNr/n9'b'Rq=T&`:H(9+"JC2_aasL1D;#EpsZk/nT*N`@U9E>S6i/ig`1)%j9JCo@"Lq<r!4f39CLq+c::ZqFsF1g>_tqOC="*FFOlf+]BSkAk'qq3*kgGN8()cl*L&52i$=E^!s^X8I#f7a*rXN:>c3^V7tM:j%[Qr"U6_ZH/ENV1?Rr$IT*%i%(6*b$.+FR4$DfW!V\h.#c`&Jta`''b$/fE(->$A91N**3"lLF2pZp5%ngOjPNmok0U)3e0;CPm^a%.:CPVd^$T6`Rur)NRfe?Yc]LDQe0Zi`Fij:\6_ocDcF<b$gVM:-tq6'>Jm\`6360n"_1g.pC/Oq.cfXLVN1N\XPeo%61`m,Cc)`h%'HIL)fqeNuCrj,T_M3_KFPRd2(?U8^$`meg,qN9)C`.;Ekuq+qKdX@>9K0$uka5CMFno;]7bhQQBiq(WJnV`("]c5$&s`u/b*['K%&[DHgCgR`\Lk1l!R\WSk2QL2Z=G3e5Tp2OG=i@GX.f*&_Z8i;De#b/6=("H$$L/"ecsg(>'Y,__Ct68::aE6OTTlE[=_+_5&aZ?M%7:VWhWMQe?AV!jMMJt.]XS]<#km0%]b/dJ@8m`>o.qNHu/:CZ/'n7ZBfq(W>l=Q?r/?h`GBu6%S\hd!Jd[?qjXm/t98nXG:PVRA;%94ug4K"_r(B[(S5.8#.4E!i[?f!I,@Qc#Acc6YoIeg8)^6ct2uBLR.q,>LLSfW!/Yj].@$"]d<0,qN9)A5h<i_PRK;-Z24taZePA%?IG'H[BshHr[!SY9hQEtRC\rC9ae&\?clKZB>LIVR>"?CXA7g(KI-M;;n\tUCg,!6Wd]YrY\@f<.8r13Y\?hLka*J/XXT6W[LRe2%IJ)mkL\(CP$SML-7jB3_RTTRf3,QB8X=:!n;9ci9%^nQK/qJ?GGef-%;Qe#+\63hU*M(ud$#aNoDcfD4ausr#bVlcU6Cc5)E7c<+%F-hp0iTNd2*l07Fe'&c2L2V=FHn,X@lYW7&cIs^i`<"/6M:>,uG(&_]K5[=BMjC=SU[O@;>BOBLb1BP@3`1_!;6.g[6!*IYlNqbu%I+ZguYRB-8oImHXJkdU!Qk;[n)uW.`'Q?p^>bVVXOJhMUV9f:)L+E&gdTb?*YbA7OUJ8;#&lDatUt%jN@qJB-^T]C][\TUib])]#%g^c%.RE_-^DWqEDgk,^,Z/ne!*$)!uM/(9V-WHG.TdU6T+9b8Zi(E+`DmfhcZPCV?3-O5F@7Ei>La_h16O@Wp*/^_g6p?R9`dg23%HjAVn'i$aPJCm$p"*bMR)F3`/Z_eod9UmG=O)\lhi/"f,'%!+f6sQp9$T@%D+^>f&D7NnFE'tV(@XAn"W?S5oKSOK$+P\-7>fXc.%71uT08%1;V8+7LPpVV0137Ns.*#!o%W+4dn9n"Xj>ZgCG$UR-1q,)LK%#'#_+"i^I@gc$VU;eSe#HFW3,SsM<"63m6ak.5j#jXY!%V'X!tW]Pll(%I]M'gT92onIF*UV8F%",PU/mLZX=r?9.[rXc&-rR'Y0jo;eW3u7:BYDGXo&5jY7>IgY$Ln'[Q*K;"g=@:nP)cJ4F%cBO?c$I4qp<l4F<2_J"l)Tb'b4d;4uL*8,oHA,0s>cGWGgB$o9*+qS`+3e6T:8S"\F.:Pc_Tpbj5J#i)lZ\;:o3[*sf>=M6M!Lfg%Rd$c9WXntK2X1(6Y>foO;/Ihsf36VSeb<F>-q5SVGk]i.;H'/i]YH+H<o"JmGr)'E9<5r^'9&*"/Ind++da`O#c>`g&]efefT;'e%%RK>5auAVrPPQe1h:-T=?XW/&:U[H^V<2_Qr8]\ik9rEqQUAE#a%p3$J&[`FH<@0V2oAE`D0V),o3)@bUo"TrVhLl:!WuN!ojH.U%C22*ae.1Vl9P"'u%9mQe==`/`BDG<fAW0SU6XOr7nG+ucrRDkD]ol_^jbKfgN$AdVN^c%A%3K*LlI'Rm]+dfgG#]rH;h2i6gC8m+%1U_N=PAC@H@Ru?@Pn4K.0?EssI)JKd`<ZbW5UW;T;55V;!-Fqd0!;%D2uPbpKY+Cc!-FqR7>Ojg>DMRX.&-ca,&Ht]'_KtMR2-5a%!1bN5MZst_8b?8jqWIaVrT,-N-&E!0?'CXKVAS\dDI_#mIe9'9(FBM?>SP@j?[N*B9P:qi`a'4qA2i(d`$c^EFu]7De$KG7,@<\;%SJ;^lO$2J80**@[7_&`>0n2(j/Zdd26)s_3$8(#ZU>''<Y*UdH\FX&.SLG-/i7F@i+A[P9.gke>=[6S)\44UuUb#fGjN>043&3G5%!]mA)gL6366ql&=&1Wp#0;\FQO=L8&Fr+?91U2`:+DrB@jD.KW-oifZU.K?Yq_pQ?QW3)<2GEC>@cY/X_sJhF/_4(NQbj=#XMVKR%7(4Bdl)rMnLoq!IqeHkBC3[B)-Noqf/)`Gni%+#mJQ.[2=d7dV,]_49eK2<Ye)b=t6Fk(\JWt7:BWSRuI+ihF98=f2>.fN.f'CT+%+AO-d!J=Sk$J-IO.XDl>?X?fg[)@C,6!D9>ktFj<H#dX?-"mFPOJ<(f%VN,N9.II,?l2_5QEc\R_1T!DD>3MC5(VandP'jCNuNsL%@5mSMoI]UUr&Cc_-E:An)iB>5WH_[5[osbHfYS(QehS$QS\t*Qp"Of&>nhce)rPuunuWWW8<:XmU)QeTQX-XJAH6JADh*-J2Xjr^%Oiu0gNFc(gKs(Ia"LdgTOL_O\<h#5f.CAq05T5>6QB.,+("BfJaOju[(G7u]'Xf^o&BXiO\n(C!`Vgf_3n_3poj*k99_=&m3sZPI%Gr-UgcYlnA9nRDQCkCkS1dlATXi`(jWqW<JY`il+FLBn?QE[N'NQE)CmU!&_UVD(-"Sj@W7ShT#JEs%%Y^7`+%4++S^;,<f@)->R%+d&7,?SaSQ")a*oq^;Mq#?OD_$UB7riJSoa`Q(Fom[D3A)qF)4$s-<e,%0kP+MuL`b^c5U89DgEi6ZMS<ZplH#W!Lq_9p58kdH93%@Ynb@:,dpqEN5!a@#J,+K2\(Wf,2QRXO7pg^N$)%3::Om[Q)2fR7^['a7#2"i"0eQD8B)p\[H)/4#*Q`R)3<Hb(VYU4*5Pq'Y7&K%2?i&s`nD-ls/mgG51cYsmUKr<N-j`1;m?4\.n7#tFJ%YoRXtMDC"@.;l@Q-T5m.GIg6+t/AP;g,$9D*D(VRXWW25ml1>>@5&`qFY%8!g*3F4nD@I)ct>OeToYFM)AN4+\IX=2=bIPhL1<$U\]7=MO?InB:=?M%cGUo&BY+Lff5@3,f00DMae'S_#pn\/dTJ"6)sZ0\/5/%$P.Mj9n<ieJ:kaN;%sD.`3"gnET)Q]Htt4e)[p"46b[ORUBl/WF7;%+64_Ct@Yc(Q0+qV[-M0PLaVK3Dd[e_e!?%W\oY:L=GqSa)%q%anV4U>^X5nFE8Z@sFj16.&0%OXUj9b2I`bc];;^S*>)#i/f@BnCTD[7(A\"5Trn":9gKH%[<U"/`JKKcmmP^_Zp*M699^oDjfg%O_ubeo!'cVQsmHH7.U\=rAt*gQB_q.p^8^@,0W"dj+PrU64aC/&GZ;cd5bIC.kR%)#Yp$>I%1X='GG_g]`ainO`4-;h&26^,]Z8m%X\,0<pd0W;cSqdrA<5'r`0'-f<2[m[Ml#4[MNPjJ'oQ1!@lH4=G)UGt-t-s@@M,.BE!J*4C)lcJQu&UR"AKSFOQX/$#JqKTPoLM(%TTTDN(Q9[GSB]^p0QK9EoUsP51&.W+*XF]=.Qn?:+]WhbBSMNg'Fh:p"5sq\V$E%HN#b%m)2P&\=UrRc?(hM9(lT8W>k$D2ptB6)%")Fjl'md[?6'Hpj0Qu</`:"<i_g&`te?FiO*uDja`\b2'Duo_Xa`*)He6'@p'8qM?@^Do'm)uV-Ocr/&p]>TLm`0V\nV%))<6nh'%J\+@mSR^et3UmDgljXuWJA!8L\e=n*i[bc`:CR,JH+kJmd0nOVj%WqI!t)):BWj(8T$o$[JkU]d_KLJ;Y!rD\q2U`^C*M#0>)7]C%QD5J\+.@qZ-3?ojKa9Mf=!H!"h[tFBirBZ&j`HN:#RJ/+3[,]t6CJ5n*5Zm>63Jr_)&%Sn)FkU<J-_s+#SBU!EJb$t_\=;VH;fZN%\[UT%dZ+YHTK'JSKYT<A'G3n+.RYDMX:g)+[Z1X0PMTk!AI+P.fP^5cV?1Z&ns'QEDo`\Di*%8`2(LeoY3GKUc*-SR^V%=mICQle%m^(4V9R=AN0`:dl7qJ(`bMiE;f+3AF^3i"irla'.5Mji3mYg%fh]6(<5(@eTn/jmPIK&R(S'0Wc_rkB6h7U;4/4lLTMiEqND(*9g%KN)S,CmtZ?*+3LHhd-baIsIWJg\o$oq`IrLs!7ehM]-p1D<$uGf9_nSKZ'57;TX/Iq;#-Jle@3lo7sBYgYA6&n(V7SrUN:_jccHh%*-]0?s8Viks'PccW'6^DB/A*AHn.k:Kk/9>s't8M3C'=dlVnpZq(C&G%S`*q7Z(GN9k.jFTVfQ'?i?bU8qk@9`qKc[,ucb=Oft$^%9*9<>`QJVgP]T*e6^iMFc^)rFlMil<X-L89OY4(W.90X))tdc$3F292,+>an%A1#apm_6;Ill<=-i<6$Mr0#qqq(;?*\MrV/%fBQ%?i5-J>t0+S*u7F`#tNn1hqbpuDb3oLrR:`,jmAtXrUmesAaNCHr4fd,^]!Tke"(mbQ`I_L<UVC$OZ^%q0<]87qu6QbqYKW@P%s`_%,.Fnc'&VO.J`tS==-p*_WqR7<Q(sZ><??V'I;]u\<R(:2_r^"QDL[-8St%8Nk:L2grd,>H?,-7u+Lh75r70?nom=j9b-4l"2`)oC%/p^j_O(EXC!iGDk<j9YEa]eP33U,!u@BaB`p![%eWJC6BGCRj1!B('F^UjAh<uO<<;ap`,m`e4mXrq&qrfCSK#7B/A?X<U/mB^i"%Ur[`OrT/+,Q)'Z3me1dp,d3f+YpMrkj);-IY&5nDrRL<&jo)NC=D(eO-(D1^<g7,u'_Ug!=QQ6.Y0LtRDI5PfUb+=,rpS#pSUYkX%4@Z>bOn%f9h>QI.#EZ:<TSdtX)>aiBLhDpT92>^rdd$AgoBY`*'qj$N!.DQ;1\0kmaM,<aj;CB;ZVWA.#/P@QBW7-)*5I"mcB=Et%/^AZ)-i5(q'uOqhccOE\3Kn^D4=cns7E2/o`A@'<ZZO/K]BP4n.&>b1GX`R!L:,`KpiTN3,X%A7edFb"]i'pu&H,W18i=i!hm7IC%QF>;ZH("rOd"Dq@'Rmrc+cX&ZM<dKerm!F>Z4+<S8$H^;=MI>f^b=()>PJo.)G8C1E&((Vf_0R>$5aQrNZ/8tk\Xb;5]'b92JUIE%n^@'pENst(*Gu^LCO?tu*i8'^SBMnLcE^VNCPC`q[+gR5o[_Zs:`GagNBLmCQKG]c1fnjtn'UZ0pdj9kPUa9qS;bIenbZ87iXRgr%#r'h_"PBOVXQ5&GFBZf%Pa6?hfp+9tM3D)aAk$O1::h'4_LGS>[$&^ne63%d]TrX!U_oI.3QNU$jhS#&@3I4[C:tm''KbRGR?eFh%#aO));!Q7nSX!qQreo4%%2l"fN(\FTX%)g"?rk]@]t':1]+B`I1OdlD*G3fj9,XR8b\ek4Rpp+jjAbm9_%M7427+&`SMh`noqpsm%fjrX:386!0Xi]`=^#eJE2hu%bDC[QCDgOVDZ!>E9)V%PU=(5#6>U$bBN&Eu'n6AS@l(pbnX+#Chd<N*>V8Lcb&T)#NLZl+%BcCHe%*4)^t`quZ2h847[1jqSG7+ZIcS9Q!E$e[6Bg"Da?21$tG>R`cP9/_$*"4?6"6^Y$r+)/8gF44=>=-tm[>#*3J7/c6bH*E-<PGN_O%elXCnH=DL*EaO#"b3$KpCl+Zf]m\9)+KJ3C9(4Q^04s9@?iTragUh58oD](U(UO0kE8g&N0<a9p:]GNdp[69ZDI;91T,bSVqt>%X%gIo;4)qansrVa@;hs^R?mOjtpI005_V;UD4K22AU*BENIjgTh*WpFO]"2Ct$qbOWlN>taFE--PWIJ)Fpq4$iV0".e5pg394/FSc;%SmJ&H?a_`R[Jp%[0o/K*hVL(--qO765*!])FaZhS=T[X8L==i+*t%N%_Qo]eh;>06-0WHf2V@KTW('h/q<b6=^Rj>tH)t+Up\O1K%<URZ+hi[_=]&E)>c/$"%qs3^shZ1;]q1R[^O<<@c]Xt_eI5jE?3$3VCc0+2:pBA69?!q%/r;P%?rboP4qt8dG97$EpJ%UrO5MpmL%Kot-YG+\]sk5$t`p^I254i`T,V`F#8pHP1s=u6l9]?bthlg-f"r:u>"rVZ0ard5*+S'-TY<uLNMNe$pb"TE@hIs(bXp#Xel=G6S+%,Om_5iNGh,IqWOK^;%7.FanZeBbkNc''=3'rp&6^%m]bcqXj$`/RQ.Ra8S7jiih.BcYcXA1%Mt!btn?,p?adTn(p7`h>G/8M&">0%YM0M_%I<GT%q#7nH-ON[q"CW>34.YnkHNu:E^=SiB%LB'6/G,4Dt>NB^RLi:WH9ZAb]%uSnb^L2mr.+Nh<e]Op`$ZD@/lSSJe&\+%I`fOu9Hs.HJ,B)'J$U$^mIf#Ks"C66C<5"Nn*Vh]pWtOBP&9J]rptJ6S5R5KO_ORc=-r+%58dN%oB(`#hUWNg/_f?9@]fIT<bq\Z%p$1N5p\,2g6ZIhA:THp9r45nc?XA0TrVP,^4!)VsbWi@5($*ukqY'>#CPQPhY9/47Immu7q`&Tiq*&$W5FJCN)t4N/C\-'J?[SmP%n`H;_$$irX!(cU8[);Mtr5H<1^OQ%Pmem(7mc*[2mXAelpI4b$Dp%P,BDKcYhq$*E(:W![Raa4uhO@CdnD:P0Y,9lpZC\\trSdbR%p?e@@9_sZ3kN]3VmG;1JVj&tQTglmXkAN!Ao>d>EfAn//j7PBt5n/["oBtS^]8,3DkAMFpn#u_S'(3KFI!^)9Y2qCPbO_dX\)4qJ%a-%N:8)uR"P@A7TX#F)b$gc3CYMLls2s5+/0+A0jQT+*2RS&&(Mr!@(LV&FFTe)W_Znpb1oek<!D_k\e.G\Wd\@d(-Sal+Cp%e!o%RYkC:]6=e;=1=O.LW_nF4>5gNL\n^@?S:*=8:5E*od4l@(,#TN3UOFP[eJj-F+=#Zo)9/d]=U:4hS6nd@$RifRZ"fT=-p,Ah6?eS%f67b]B;=/Ap9#.>]=K;ImbZBlV%gVeh@;R<CQUj!*l-mT]/OJms6T[0QhTL6d/8Q9LF6u@U9ho(Wc<7V/KFD'ia"H^cYe$tI+T:[%J,>/aga5en9htQr9Vu`KlMTo0"iG85EHd56)Lib+rnW+"ei<='-`LaNn;.'OU<n<EDLW*TUtW_*0(1@/Z6hsegL_F+M`<YJ$VL#;%^nEFSSdsaJ-SP_`7bh"(o10H0I,^1T&QcRhg_^3j9+8%H;U44Q:87OS\8!bWe@1#5gu,_p;0ZLh)B('[46!=fL<L7M-OV19+6h'%%Q0M&\E9_M=ic3G5a/s6KYa-(Kh!Eg_(N?"I[i,obU7.T=<WT-f7tZE$QK'ZufnA:\CPqaq4G?k/HPhe,il^'Y1N]#8ig)pL^mc,O%PN]"H"iK^d*mlkSNjh?WY:r3M@RQorK>ZZQ!^V7^jN]q-'WgtrL(PS*po+)2i6Z=+J4nF.I(R&WW8(d_LPc8@%;U50/qGfAaP[>p%dtlqfD$m@OE)hG:BamNJFU'@Q?m+)i[fFn%aGAh9e'W?>M(asNppb^5_V0,d)ni#:7%YpUM17cAcBc$G3?gA$\Attnc85sC@&\2l%Y!U(3cXMbeN5W$=+NZ([Fn_$%kGs+NQ_r0\.gh$`JJ048iBfY3>Fl'/_Ke<"*"B(V`+l7A9`/TQ:nX!A)F"PF)K>PfK3=_GSf3QV%0F,l`3Wuc=&Fcdm@jI!`/<=Z^"[L#r9,tJGYN)R#XUbtuPHg3KML&hQ$pl%Tps;rB,fZiQ=\<Z"IGIB"hLlIg.TJ!;oN9ID=^]><%4Pcp2?jYdZE<):/Ur9c?[&?lOKcFsZGm6qdGSnYdR;G?^`LB0T(>,%0iM<jQMWD_Oi[C@,l&o?RJ_C^FJJ3OkfY)kR=JS^g6spkq%k_:8aSt)[4_&?+rnaCs#P@-^B7pN9RIPqnf7):'P)=ThNeB:]u:uOYh:2pXaj,jn3_<Nke$P=2sU(DqpY<d2/,GSUR1h6iKHY%6`%nlNF0@s4XjD@.-j0+)jI#D%OMJY9)Q6uhC'KqM&^dQ#5%;Ioo*<k'!OW"]@n<Z%"O!n1ft8o;Bo7B[Z<8c7gJ'jS.,,1rp;h)jR@%DhX`>(jJ!u[Uk$/2(V/5HlidQClSn1krP"?(N\S>npj/s!h"!G5Bd@8#Ib-H8=Cb6bSK0%.R`F2=n2mCj'lX>&lE/UNAm?2XOBQn%/R^(P2H>Cj3=IK0HY-nqK3V4lh(5<d9dPm)P(HMY>s<t/d!lF(l*'slG7fb9+T5kA7-Lj\IoTTPY2nDjF`jYrEHSL^&ZqlD=I2*b%9O+=7]*4D2X[P.ooQCYWDc&d$O02ROM#/Ha0QW<e@%h@]VD?u7V.%*^$FgGi(!sSp7H[C;F,?I)*7m\UL?0m\0pqJFCsH$)Q7hT:%#.N'O1#f>PK?taIDifmI0=/?K?Dg,DUp)'VLF#3;^/V-pg-C5#%k2AVOcDtT_ls\@hoC_;^k/G,g`DAXOE4RU)VZAN<.<u^TMnPj%,/C0UU?c`pK6d#mgGmNLYJU2<9ltp<JBOM1I0aP<Z5l8Le6rk9q)ESNUE+!#cq#WdmZP[<`lTBuPCh_A?TV1MJWU"B-\P9]P3NTW%lVdltn-fSsVG\R`&oIiE&Zl(XXY`R:BS204.9L$)<Bk0Za_XI5fG3-SbV0\5dRjdE`n^h+?A@+S&VaG4-kO3TnZ^QO/G%8*-Cno6%fTW-.-@s[?5C"X0"G<f?#E!.a)(3>'R-;OJ\k^rJr06E>kDV`$ei!fV9#Sk%;+-@*L0.^AX<8)USJ[%fCSHk4&W!!j"k*OcU9j7i%`(!>"<nR<loRV^b*[e4N_-L/[T7`F1g]5UM5a)n>Z6,T3"e0GkP#>mt%>c)#Pk.mW7!K2L'ca3+'EG^si6ppj\qONKd3?dMYaQn'%9E-1s$Hc+Qe.DiV9o,P,FfGbQDRcKq:t*uVek`8]7/0,5JaoO+P<Es32Xs3!,&Y]$aAOf]4C'7o(uAk"%Dlu-VFf::%)R>\Yj&j/%4iFWs2c(R^&3_%(ae4AMBBPp2\_j__+fGdmkDl37'7rb(NJkq3o5GRn1<d=;FK0/9O)Yf01Xf+(&.N_O)bd(FcK8qAkd7I.g*0Xc%m?k>t1io"r>HiSMDC*le>G\F-[t;#U]&hb"X_2RAHf"#?p-uqT;5km17\]4'ZW>5t6%cOF:C+D/79.1(Y,1],_]go,!]EK#4gPD"%'j.aQ1_((8`(2"Ame.'I:;[("XV?GEFUBX(XA5+Y.i;_pO[27OHRk:$k";:'$\2B;_Q-DF@m#F8MSX&I'9\Mi0q+aY&N=hE^K+1+%Ml!K1bpKOP\7In)5+W=O-hUCQ!l;,sP,Gb,>oI[]p(B4Z?9Q2ko?m6(M"#aHU"bY3Q6k(CXVikK!&@a+?Lo"dn:JGkoXISg5X7BN%[uRLgH'"bNj;Hr>_Ydu$6ca(/r58q8K-;/\m"P1c+jJ7T$6\M*B&mNrfhgocF2V`2KQ.9HNd[q\c.nusd=s`=6Vpt3=(-*/1Sr7Z%20Z[QV&%Rp1`$r$;/dV0=iejncW#D*4<I_H@q=ZQSK5q#gu=;!=^dIb0%./"\3A.c8?U]m"T4a3Wn\_77:;B]5q&1hPC++28SYbW%Dj[5^T*9j,`<J?fnKcc[7XJf#A9XQY9F0u4(*a!K[Z9?ao8GD&/U;N,8#%CUi0NN)S$K6uBLNGq<4Q&i\82]+8)]T\)[%MLI"%[*%`l+GjPr+]YRm[^,R$PbA+;]^.T>sO$b2\Dh%.T0lafUXuknH*aKmC,K;%fjVD(ot>@rkW@)YZ`if.\a1T!#.o7'*Nn6CJ?8Md!\g%SR>%5!J6kVQnPMsf$P5<jq/HIJkhX.;IE5$EKLLIVQ`&8I:I)kei8KLBQ^=K_6GQXP$1eoJ]]#_qUgZmcDm7>;:G@ROj%;ooJKa=%hQVO&m%gMf#&,9<)d2N:H7L[44I<_8YVs1/(enpTbt:*<Gm%U+'4,Q2(8O;V$"c_K;@lQ@%BDD#2-?@):jgdAS$1s`iO'*!o4!%;%@i=`N.NrMqhAW1bD[k4[ih1ONYR0XZ]^/-G*!TMZZ4'.bj?='.!o-dPk"LH5e0"``)VQHMJB.e50kaCT<&fli8_B)VR=M<UhBB[s%`^jLh)d(ZWcKG&ETTmD7Wd"$b1`/j#-*U.@ZN4.gLe=)#hkVDtVi4%<#/`n=0)5e`(OgWNS8d^J_LME=2%P<go4[>r'.lp$URu+?%A;VV,5TNU8L_4]>JWS[HZ6)P%@#2NV9iU/3(nu/D'28rNbdB]r)JL\fH@oI8Z@c"G9H0R@/puU#*iPP9+&"Cg&-+>G7:gFbD?lkN%IYA@`BUm)!qL&j9Bu)$:^q,WO9a']_6"&;[4PQ67UKL^<BEM9FN6r)8YWU(+aU-1h29[CGbSsZ^#Ume.;\n4T&1iF#Z9lIP=WpRf%fKlMk5Xt31`'(7gD@d4<;6gd)M_6K4J\2.2;+n8PftgpFiN==K1H\\e`n2CMe3k+m\PH3K;NcW.I4Cl/X,qf=VF7\3QRJhUpr_EH%]s)5=Vh>-;b*BWo0N3.2$'o1hP^ki4Z3ln?G?Pct=o^iNi`&\_P1tc:rXlX5[8bLk,aH4=2)[olbB7VQ+riK2<L>cP'*[_-N-%.5%"cVn)PQ`P#FZ([3=;)U+EL95;(CR*c`8Q)G^?biFhBt3r0L_Ff_A_!f>4QRKRKU%$gO`"'h:7n&:#FEfT!RZuZN=@(R2uI0IZB4:%53[O9JmHu\$/9<F2rgJbCsK"JE;,`ilK2Vj(JFLC"gq+N+?rUrF`N5`Ao[.N$lS)9]2$A"<.<8sJ:#/1ag=goJC;OKf#Z99=Mlt\%9AXNQlHmsn)k_<i-_D-)d+_P=`cb@:N(KL=#tEe$=]H>MU=!"Ab4Amqg8\nLAlWO^>?*(6:<Hn;qIcuS7m30WW`lg-.NHPcK.*cM%+aCW_Z#!I;M>%pX_1_2JA(93T2`/%D9BCF6Z^Ff&O_.X*QndU&`+BaedPI(FX"n2m<gccX+Cd6e(caWo<]*E(WuA(,<Op)"XtZtM%/?\D6VH7mr%X.PW*__N*nXj3i.Q>=EoPeAATujC21olLA5'@]@MOAj7QZ!1G<`O].X"'I%\lI[Aoj&M[g8I=[7MBno"Lkk_VCK6O%D5nn3/8Qfi-(i["j%Y/?8P<46S^S?F02AZB;Z_dbl<+Nh_W[kP-!Va)ah;+n]>@DqZ#2A.clfkrkWk>DSI3OC1$Oi8K^+bK%#_dJ%W(Oql(c\GD-]j6P@AQj.k-_!rq_!b^c590+mos+,\=4.IluTTXD:4/@_kcfVq::LN!<Knad5kQ2KrC:FN-F26oTbRX5F)(%f+kAd%.`#ATZu"Vga('Ba.XPG7"mWiGcnr?AR:n[$ik=Yobfg1rZV6E4X*M6P^p9L*#!6=^TbWE#mO"n%j*\WP%G<Y,Z."5tN8s_Ro&QeN%(sN$`ZQp=iF#"i_e&5pfjOsRO:1,'K"kVB,_U7#6;*;7"Y'8N`acNUGE4.='a@7Z`F+YSWY)A+M_14l'a$UEQ-bd2NO#%$I*LT>d%>!C62`mM*'1ZPd"M;7H.8=W1Oarc$PUI[Wt,$aTq!*If4@`o.H/*i2&#)>([%LXhd]$PE0?sJ>/][Sk$Wk>3`.UQ&oZ%LL)f@IFt%Cm$$p4[Hj#CjN'MnkLh)L(">9^fkDi1s1f_!S*.V1Q\9=2pWd*RGU6@qG/j;A+C7kbDDnER=;o\N*5S#n*K>`2Bg3,!RgS$^-\,-%&6cF7bj)b))Wa-::pG=-f?#'RPk#&',76fekBnr"Z5'p<hMZ@ICY!45NApT#k@9'EOnSqPp$9&2A0k<YBQAHd(LGk6ANbh0dT)1U%oh(Mn*>^/B6c/j,2$A,8mJ\Hf=lSCY]VcQB>%&jVXRl"5-1-r5cpGa)@o!Sq!i+*#`kK,@7N;=*G["Ah8C/78m416'JWs?YKAc]T%:X-K-XkGWi7NFce?@ni$0'2Bt^ihRc)nEm'P">Mfp+I2Npf)!+_7cS+D.R1SJ8]t=6?n#uK8ZqjIHf9/DrFD;2+D[4<%*!@7]<m`%n6C[VWP)Lf#s"s[Ln,mJ2'VDp$H)BJ'aBa<JWq/:[@TtAEbr?b7:hP&ZF?LWUctYPAEje:#Hn_&QW'ID<kVVgg"+VKYH'+AZ]]E1%'%BrD],Q]\DgYXR?F,PJo,bGGbHZpbihOd(dA5*mh:sK<F[NPF\&,Ao#]Idb/3GS-.8-r)D3g^,j;<-F;fg`p2;a*l4b+6N_JVbi%OMH?LD/ka+nt2=C&Vim,bg?0cV3e*n-68FQ@llZIkaiF/(=iRHHi<dOp@kid'6sL[>dd?-p#UE@YsO18OYW:bYQ$=DcB9O=5d%r&%SCgQP]0hZ)NJDk0X\4Rdi49mGi\b^1iG-T:2j+)u2l0EZ.EH].c<cYTa^2h5%AYP%&)H]8Nscs7SaG,,eCCbbcX+7s.&aS%@C=uB%o@Q=[Aj6iT5Z4!4BQXK<GEMOg+@ESfT"?`R>DXcL2IOOK+jCY.YIselWDB]+3nj-G(!SCV2sC'iD!@_lcYi*257:5<*&=:(>0BGI%U>IK=;Tc+bB5iPE$-:*a]\e,\C5M*b-?^e3n\3NN!bcJ.li'BI$XffE[i:78'Q/\u-80\k1'1Y93u`oLKXTBFar(554t_5T)(@8B%h9XETn?uI,GqF1>6K@r/Lr='LI/'[GIC-g]A5"(h\6T>i)<c+I*0%OG1<Dc;.WlurQZ><&BKCBn(KDJA%<p1Xa*JZW#7u#l@#i>^%GgNF;AV?s5Z)!))a&@EC,i2bu+T!SU=p#:i1\9&XV7LbnQ3K)f0"%_P5h,IlhQ7"+>7jX<7XYA+.3=0Y,G#gg/>'N?5QM7($n4Ko%Kn7RCbSTM^2OfN1.<Va:Xm&(^Y02,iWa-,3;JPgLO_m[Ng>Ztl`3,E-SAQ,[SUKN*F_tim.&(WJK3m`2B.HATLNINi_]C([US[.4%?,-06D<GVK2I&7t?b9q!(<]PJ1q[t"%C9eUmWktg`%6d#gltg*]E/c3b^g1:Or=L6qm/>Z*[\7Zi$i'CTpKscq=6;ATV9Z;e^d?J%\*K?kR0]ek$ikOAo:eQMlU9J-&k)_WbZ5k>!c`*$KZ!.t4!&#PY$;X&"baP-X]hrbST=sA_&f;e)oCGsia%t6?Aj(c>MI&0?k-mj%3ufJWT<:aW!K>Dhmbe-]#d%ji)6m!57AMaZ1IStK\^jhB>N,EMCK1K:K?m+a>.Cd@^?ZG*dth7ghTNc_QS/ZQD*97V\_+5jW$e:6%W>s&WacHO;]S%^%^q3?=]6DKYYtP?BNf?`aNeA2@(d/[al56Ws;)CMB=gY3XPS/\Z9rl5f+do4IH]G7r,ESebMN;"B>:\)'p2p\3%b6(Tlm2o.BILmCI:+g!@<cqr.[','#$6;:<GUh@&jpajMa*X[Ta@b@k#=mfF=u%2S5L2FjY]/is"GnROSUNC>$g9t,NZWoVnQ:2T%S_Ub`2&21%!IGL$F@m2I49c2Ub3qf:=IX#9VDkfn!$5r)``IE^@C9a+[jAoD[&]*);"aC&h9qG3:[+S6;FlB!e@ZT-.%>kpLV*+\%a!RqI2'qFmh)ZO131FrCUJ18^L5G:Ddif!U@1j.eE1.K^eo6%WNT4"ppX`0U9"<Tc?bg=_`s#2%12LmW/m/I."-_62rBe@H0_2Vn%b!UTq4clX8+I36'!1,aL0ci^jX^,LdZq<WNCQpa5k6&98="I0`3T+/[Ld2Ip?*n5<S[jB[%LYG\G:U4]Rm/o;e*@GM#&g`)KG3,<%"l-e%%C'::^>4?[=JOM*V&kG*^Qs>WWXr))]gB.Jeg%8'C9lI<mq&&5e84?;hak!ZLJ&e_^H:ilm=(unShi!Z*4VU5e/(EJ$^tp\%p-YFKj5-n=[tnQ!$Fcti[9"='qk5r=E@TdY=GKfRE-N)!_p/Y3@g.A^\u7i8d>GPs>C2o[\7i0oa+Uh$d!+Ugb^R[sPhXMb3B3$t%DXZMQ"WsW^DT"1+4QR^_,#;8&(To_=q+p0&=)f2:9Ll.@=@)#>i0;,,M50m:Ekl^`Y>_Up7c<o"jcBh>K9`<4%ciBBRah#RQ/>M$%_9mX).<5E@3QEocD.:].)7SKkp$ah@;b$'X7Mj3maqa+']T0?68ae=6V_VW"*55=Kk'bI%=U2u%#P))tP$uf!C>E&(9=U&hQk#&2%^gk_5JF%Qo\FmpYj42%FfhZ[<6`$6N-$+M[1X]B9cLXM('DB;5#<-]mYA):#A1u2NpA+='m^&RTnp9$]kl5d9cJij?#9H7GQ>jc)%k'Z8"mJ5T'c7>2@rud@_Ipt1rJP7G4aIL:qaoCmuoD%h)/?ER2=8oFo5r.UFj>#g"Hd$bS8[!Dte#GF![69=pn&^\jX*qeH4:ZER%@hA)=F2$'UDS(M_HqhEt%!2D6*cq=s_OSZ;\tpIf43(p(]2mr@<Tn="&SP%'5h8%]32hI<c$rk&*tf8Uam#IYUI0Q0e,J'r90[K=%"GRM@#mo0j,a`_O"/I5'K1K"@>/n(h>QMPfhT.Wb=0Y@?g)$q$pL-k8(2mh>j@8XA_d2P.Qqs>qjOF:1lZ*c"UEUX%01-nh65e3*%<)nA&#J-L;RN=g6fQfl"Q][n%n!k^_*#=Z'Mmk3aN*%+-:>V;natnM3]CT,taK,TR\)gCVc@BEc7o[a#0U?^B3EH(*JZb4"e]eT/%=jE)mnc9^PgpPPt@F9/iP,39N(oV9"Qu5KSYh[Bo/`BN@c?#k9W)C0pSb-1KPSttC+KZdQi]Y?L%]7s+N\tpc8l'8?9=t-Y%7d:@%p/dBDh3bM4])=U2L!L[je<_4Los383Hjr6iMoUZIp)>`l09:eraY<"bpuCc)'N[B"ch[Lk>fWhnmZ=,<kT@a_Em,_/W3pKb5P8]C%m>c]\HK3"[\NX3acWQ#WCcJMERU+06fm/-:mET4PJT>Y[g4=,.8EQHe2]ZXfInt"O$2eM(BT`2tK<k_/M,n%\@Tu(Qm'rg>]KZUj%dUe]qX[!ktTlad=F@[X+:@*!`kBoljDX_ZN<?/R6VIrI]?I?mGXgKTu"/Ll3EeEPl%hXqnNBN/b>32]?&s8ZT?(p>8gjkc]8m"WA%gjo;`XHG#Qe)>'kVp^;3^YXO2%O]Dtmm]@2n%]Cd/>k$hi2.kNj_*KUdl5KH<oBj-9P6AcO:4/bg&DYoktnd)jf6j;/5eSb%2@24%(KDK,%)664+fOF2;/r(bZq.)lgh%dR\3L&S2L:Bd9/e3fR+>u;$?Ip+GUB(jZloJck<?]lBuh9SN.KQKhg^J*[R;A;7P%\jlhm;3%_erV;S>"%^l[sRt(Y24=Ck]/7h./-k)_'IP2+hIsrq[/D_BCZq4aluL14$p>5=GdZOM=Nk!T_@8Md<d1H>Dt=[#pD4]aqR5$/^Jr%-G2g6lQ4(r!lN#iZN[\)@3H\J.PK_jZ499.\3t_S>;_*+#q0Q@H2-#]9NO?"L\M]<r^Nt)l_s%tl@RL*n(gk1gtVDad.H06X[EdI%PQo:!X`oco*9J$SYSVP4jH#&Sk#Ms5YWu**fJ.nADQ`(UUa>\[[R+S3jSshaLJF,)?OPu=@_b=`$L-Eg6V_pXN;E(a8?V;SrK[=<%$1M4$GbWf,@nh-;6Bf4g9EgPjfD`4>QQJ"!q)=]&jA89TYbj@I9fM''m<tS.mTrD?W%['%rR`#/$c(Q>m'".V<'1un#\rb?jC^/s%NdUpo<'OR*Ts]r]-=GEsCh,\@legkP&\0?G[A*ukWc=p!VUmCCXJ5r#OgDJ6!scHP28<m8q/hrdA#5tP<G#Kua$"i/N@TlY/>Xu4%OP[C;:.t_<,Bn)E3VOn_TbcpmP$L==Kj7GYl?0UT@#_YF)(C/CGGCt8?n)Wp(nO9Mb=Kr>G8O)Y9<Cf:;G&Dh'&`Lcf9g[7>'ldj%E/oQ1EZMR;JsZT8-<EM3PRA_5l8_goFbdks-ju[uh%aWHPaG#8Fm,EN](E"7H/>n8>B318X$m";_aJboHAJj(UK,opjNJ?`Q&o%p%SZA/UMrN>AgYb%Q#%Z+=?;?S*kPF47(cXS#OHC2%ON.`L,'&;EPk&h`PtK2LSKI9#]0Sn`V1ckuK%a>->+_H,A:Plq-8fUq(<,;;%6,LY6_K2nF5OJ/r6n67A"W90)-\NEAD_0Eb!NA<NY%\OkDNFl.rcF.h1GtHV#'l<N%<>ouK)d@gQ/!KIC8aMjJm^-ueQI/`7ZZp$%n:EdDirobU3Q=R91-OaV^_Gp.*^mbe]>*//\WQ8uJm\`@e_pWK)$c<?Tq!6P@ub7]\sslRni/oV/=[h-G_c#jN8Mh!$*M,*Oaf3f%.KK'"5t6cYC6'%hb<kuCJfrsJRaB8`0J&H^OGPeEb#>T`6DCa6',Kqci3s9G]7!@j`T02.8KgG!Q"tlj+-1VGV[Zn;;u$PSXK172%H;(FKB`^Q^'r;*/M\Dt*HZ]]F*EQe17O+eme#^F&$=s1*$h]@\0OYC%Cs$&fC,ARFIND9bX1F5lkqQfR:i>30(CO@m\4r>;k(0q;%kh!HgZFl?7nKCL1M6&M/m1]p@r6KSILac[-jUHVX9?N-dDqMI-r?>_>?"OF?;q7e@OUHjp43]J3b,ndGnSh/U?!8LENS?HW*Q6gU%[TJkb?nQoR6JZVa+P3ng^f4&Qj5(S(Id[V!0X5P$Yk,7_K\:,,AeuSfCDFrPn7Vj`li^Oma5=GQ*Iq8]#>pg.9QLN@Vs6j=jU>;0%kG#Q>/U[g1@=GSpHBc'NL*O9Y\HZ0H`5V\\s,N9NaV[kcPEkQb]J3D(7"S(SiM=90ch^1&l9eZ]GGkkK)]*E!U*29U0rl7%1(*n6%'F7)f9D7p^W)*NU%d558,\DKlq+]/9M=Qp4-LXDagR#2_G<?J'[ErtR[Ms@tlGLZY@Ofd<koqZ>45<OW\M4O4\UkfSbERjKZ&qe7%6-AX9c>0sOPJlanMZ!h7R8g]\'ZV/nf8DsM_aB'a>.%Y,eC:&AqLVg`Os9!C[os_b,DqW4c:l-j[M<%U>$T.J9AWN%_j!QMZ=@cW%\9`$^X3=`UchMZfm[1!96R1gGR*aDjXZYj*5C9Zja@NX^(2dqCh$%l-lt]E4V3sbbifOc->/+\g!D5Lb,NJ[tE_[!?,@1Z-J\KI_%nn2AFMUtX2PeX0)'B(O.Mo>)7bPkk7Ic7@uKLtGhZC^L&67_TY6oaIm<l]B"Ucj4\[,540H8XGQiPq5oP.M]ON/9OnMrd+<&,k]!%f'p:%_jN*Mr_,:SRZm#REoZ!-gPIYinf<^U'B;K&.c@RR3\9p'/NrFQC.,b8n7&&WQc3og0i7bSG:htH@c5A/R2&1E`b^MX*#ji:%bR^o7G7Iqc001NQ.c!^'%((l/-bL:@qZsZ_]bls,'b-MB(dOs0ZhtJ%i\8-&Zos[ag^6d[f-?Iu",Vo%:PWn!Hs$l"A"YT`"&Rsq%3$9[RSGH,)#6jDN[eb5+4O8H*<uYd8KG+HDh\&,3)[[Ac?F-f`3ADChW\5.mbO26OUZ(^&CKu@:eZgKf'4FRC=B@o(T1Jb"=BFOB%+VjV""[uj%=6+0[&bq2S0ek%($l^,qVMW+h@+Bmpa)]qVIahaZX@l\8:FgNF1>p5]=J0K!fG+f!@+1D!K#+Z6d!ZH.K4,q3+3o$j%P#4-IpX><bQWZH6*e;`"I:,cK`&-G?*/<^Ao&MJupoE`$BME%RI:,Jm7Lt7Tmji"C`f*UTWH3Mt4M4H""0/(s40onX3nM0^T1e4<%$S["e#M0#ecaRt2U"%J4\uc`_GP7B1>Xb&s8#%!q42SP9WWT6jCO!"^UqW@'6Ue3MFBQ,V1-7@nU\@;k-WX/kY]%Hb@q["8\+@^!%RoW1cc:"@^;B>8'o`P2d$/NMl$WlCgq_16r?6kh3Cc/DWH$SV^<a`=]KpFW"iJ6%o$G]7GR;V1bZ^gO\)WEBemUuct*c.Y;oS,?G%[Y^g#"?BRl'dm;GhJtSjO/;J3(1;2:LU0KMg]KEF@eZ[ci>!)6RcHYi^\+I-DI%gOXOo.+LdHMM8ui^'AA3+*?7JL8WS2%u0<qjh%qBRe\`T4oi;`WY#ZasVZY;g-K]t1U5pM"PiVa?ZF&p65<l!@j*k%6i1_R.gnm$JYR?C/6P(ZLYuIK0:ehSi1Y<56mJgh)UbHI`SF%mHn10\C0=$:4.5ankm:2Ko,gqCb@)m&6"$eN=%nH]b*$q^]-\Q7rF9R"gfMQ(mHAHE=FuX8Y3h0.;H3+R8.J&U1bFtX=Pj+7XYh2%[J/B;>9WiV$%G%fN!p./T"D7sYIrbab`-^Q$hmQU];Fa6mt,gBS6pRGj`NRTpH=i$ckFB-*E#V,>jJr^aE\V'!kW5dQ6%U"c:oFX%2Ze*=T&b?Y\`1197\E/l`d4jAJq@P&WI?:_@_KXdS.-BE:Fkc>o.<HH):?C_8rfagO@X&%d_Zr[IT'[%SeVL9<2;q.&QA.u;a3e;%k;[mMju[Q&pPtW6ij7tVZ26/2<-aegOqCa8ds4MJ&m1A6]Iqbn*HIa.!7&)>O1=q5^61A`bgH/#PdhLJBTZ.[k>[@3CF+uhI-rI(%bP[9uXOM4N86Q%u-V&^\R5maak.[H5s.\#+)[J1nJr2$R(!F(\3_p`03J`Q?p&6Nh$\LT;PGL`l7hNM#?(C:qUCVFo;NZk?M"h/D%q*:m6Hjkhs-m#KQ6m_,Cd18@3GN662b[k05i5jkX^-bnf!siaLg+KKA5I^4URB=?6rS\W!=s!Vk\'0!Shj[q^pY(2#nm5`6JX)S!%Kt!>JjA2ksNj"nfrehDc^io-LLCEQC3[`%F+^9^^jcV`);(\V2;g2HG@!j2D%^Mc$UD5Q"<G8YIPgG9R[D:Z]0dgu)*27//Ba;O'%l08DXjQ<)@*<O@!0\V\$WB>X0Vb:b>T;s#Clp2^X8YrPd]QpeWp]XT&rYt[Y]q4"P2]@b*l<s*Xo^/6'?iP]030)*[Ju]Z'_hrin%?:,.*HkJ.[gV5G.rt/P=$_*6<6#+;b"'OdZc%Z+Jo['XS_K2V*M--4_i^52E)BoRF/3Y3R0oJV#]R]C_s)`a7+epuuSkrT&be@5-%^g%X@4?`b3o$d%[J16]5B1L!ac+X!qQl#;hjF+T["/CnAeg$\C/&kAaJd57AE2,Bm1K9[@Ba'16]jghT@0$[Bf%#Pp$VCSE4$ple%"O\L;,8GW&N`p[5/ht('7B$Yk7*pY"Wh,,_&<#$h(XBfK;C(l:$T=*)BiJW'8$,9rL-SjIi93TrU5$#*QqI_+`m4*?HUY=98*;aj%U!Y6J-uG,$7N,9l$;q1(IWXg\>I_M(^K,E$YI9*XJG!)L+8b6R>$3^CNrUi+SE:D6"k&;&-6p/^E^t@]#U@!0F`B<'6bHOo4j);9%`!^DDlUY9aW5:2Tc66L:]nI?+(b`*Jgi8!l!N]8K]A'N-]+mXHYHQMN*T9Fsf0OP4(GD;l*EhYmC@FY4iC3dG^E0Mc!,L2K[sfHD%K_L0T_Fp]f,B'-oW3<jVNl?+uS0;3dN>Ye-nK,alA@\u"`sF#H[E@DZkHLN,GQ$C0;E\6X&;c6PP5^j#A_s@q]T?*g0A\Ei$8YPF%*902D42uVTNq),r-H_#PN8JD:pU-lW?:C0k>JXo*9hVl3On<t3()5j.\ea-ghO8kVgW^<3Epj4dWYIPRoo>3pbfoPdbSQ7Ms+jd_%8#u'/#Y,5a<Y)d6T$*R@dL5QRacaQ8f\E;KaDFbST.2?h>VEAqCZ_H2H5GWBJD8-KOg8Re+="Iu=t5dTW;3BqJiBeSC54F(=%$Jp%f_%M"%b+L=l8tW=\]kB.]3O]N-u99%21H,=_A1b>/'5r.2RqY`gg@CcG["XfJq1+r"`kl]X.G[cBGOL**Hlt#Hi^<"s+2.`';S%Z%GtpCQ,.L8kHd\$V]ZPW2>%Yr3J+Nk7SC1=dpbPl(2_\uG=C\`ZV!)FJm]lXDrKnW#;u$h=ak!2r3"H\HAi]JU1rHs1k_KTKZO,#^%JI"N$!j2t+URZl"(:d\2hK3%=5+#C,?#N/W_FTO0jktSs^WaDUHGrS8O'X]3i]#m68<0^(1,Mg+_;&8DW<hUa:erSghj7E4.tqib%CE*jS'sLh9Q5)?.e>e'<!?_QLc\/;oR;j4U"_<_f,]rr,V#>>tIDpReWQZrurI1^JHS+T6+OP:#<XJU$BG2g"-$`A_*XI'q&B4sl%#U@:ubWYSAqp(V`Fj:\?%-LJ9Tp?G%ACA.X>K><P<M_R`TkYQ#GGftUaGaeYO_al,8P/j8$BsBbKp\r3PGuo'hTF)t=KhaPZ6Fds%`V<lHeeAjG;</XuHY,E1D2QK_4$T[T%%0YXb_1p#HA's*0V_c_k0^47X-qV@npCG;MtY4V<ZE0R[(9k.Z0r(4$cd7-\eAXWZAf6f%ft5)+DWm=u,*/mb"O5kOKO0QND/\_Bl>__IW4Jh+*8Buc8GG'[e=D-E`<ftuS`"6U5+3>&n1#FoeC8>l3:D9%P]m]1;:[jFr"*%g%)Wp*'Thd6q4lMn8Z<KCn1QhWhYF/"qc+7!XLqR7Po14qfn"^n3j-=`XAS3'RG-A.#f@rr&@Ip*d>,;0ub5jV;:F)I;^j;BHo[4qs%0eNcpQPPF+We^7lBkqn%c!K-&GE'Ckee\r,97M;&.m1<70tLABHbdKkq]Lrdp;+U=Mga1sm?!YmH?jgNCK<F^p<qMCJ'p&FT4<-s%j[a[aB<qCFNVn0g:H`'KUMR<'OeWp*[IDTgaZ1s^oNYW5m]i,P5]/7BJVBH!MOs_oQ,pi_o5NILZYMecmJ%I.ruWWU1\$NmQC5Nh%8*-RYZE7n/a@lCQO-_c/a%M>,e<JBA:7n<WiMAukB+"[H\;M*rPq7]faBbk^kK0jG;WJ@Vap1KLfNM-V?*0t2(#.@hI."_>dG./u%oMutp7:Of;m2H-\W>s\^+DY6Br5BEArTMjj5lT/Gk'E+*JZMCf'7$i,.5:C@Or$&trq;5=F)U%^YVF-l>f>NJ37Ei)7J<S2W&8Q,%fM/lLDjk#FG87&5IU,aF8&Rh]f,P$8Oi*l52Wc7dRDfMoR>\ju1>^ieQ#SJoJVYBG0Gj3B]pXdD9ZAl0OisKE(NU0*&)j!A^ua'?%KctN"8A/?R7:Hjt%HRg2er9-./n2Ag48fu>73K-pM]']]"(mbPbXGnak/PV6@'ebd>#eAdI=@R1HuAVd;-j'SU!53S0]70f"1kYF%l-3K2]).N:VD[a$$DGVZ_mNM/.NXcO3u]n[/7]7ZTG_[C\.u80?EJ8';Uge/?]d--b\MeA_ILrTY2Enk2=fj86]k+da[AJLl[%oT%qo/:PkV8Fd5s?9Y3t9>ueH&u>L?F`+lZb>kN]1KlpD0nC!I'"S4qX)&]2OT$#Qi\7Uun;H$'EDf=hMT(qg5dE>"e6DP/OnsE8QWk%0/$`7:e-O,o[.YnGu']+p:P"h=C\2p`WT2OH7uun.1c*MdYbNGZGg+GonBqKlg&DhRY*=9Q[a!ioWgV;:R+u+ZLZM+<i`c?*)?pu%L,<0M<b5J)F09FE<O#;)QuS\]NTDRt5'8Xnh_r-BGT/3:3pPZL6MZ#2:FAA6WmQHA?%Rs3P72`rXd/K'_]HA:32;Yh2:K58II`[_%;R?#>'?aKuGl(Z%$?k@'`a5^3b!U&6p7]DF1-CFPno0mdpd`Z.,s2c&Vd-0u'o"q$m^t"e[n2S;Tk>H5-+JG_??ZCKRnh"^]38'`%*;+o05F%DN1;t,THZ;J[OI>lQCZd=*8f9@REi*g/7a._roG)![k%S#'\pQ*ED+$u)MD]>U;@=u,crd<^;BU:gc1Z$sqcOY(C[IIQ%K)p'K4S2&l>%2sXmm$dKhu9JNYCHPps8M`HJ,TAe5Q0&,5QCYb^]"!&J,A98s829"s7+R1s7Y2sr;NVOrplDjrr'=@s8N&ls8;--%J,K;T^]3tfhuE>Xs7=kB"L9,+k!/nDci<Tdr:L!i94=A/~>%AI9_PrivateDataEnd